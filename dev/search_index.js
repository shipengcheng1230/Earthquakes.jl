var documenterSearchIndex = {"docs":
[{"location":"interface_assemble/#Assemble-1","page":"Assemble","title":"Assemble","text":"","category":"section"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"The assemble function aims to provide an ODEProblem encapsulating   all the necessary information for modeling earthquake cycles. It will   automatically generate caches based on given mesh sizes aiming to minimize   allocation during solving. The full functionality of ODEProblem   as well as solving interface can be viewed at documents of   DifferentialEquations.jl.","category":"page"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"Also, please checkout RecursiveArrayTools.jl for usage of ArrayPartition which is adopted by default for multiple variables in this package.","category":"page"},{"location":"interface_assemble/#Public-Interface-1","page":"Assemble","title":"Public Interface","text":"","category":"section"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"Modules = [Quaycle]\nPages = [\"assemble.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_assemble/#Quaycle.assemble-Tuple{AbstractArray,RateStateQuasiDynamicProperty,ArrayPartition,Tuple{T,T} where T}","page":"Assemble","title":"Quaycle.assemble","text":"assemble(gf::AbstractArray, p::RateStateQuasiDynamicProperty,\n    u0::AbstractArray, tspan::NTuple{2};\n    flf::FrictionLawForm=RForm(), se::StateEvolutionLaw=DieterichStateLaw(), kwargs...)\n\nAssemble the ODEProblem for elastic fault.\n\nExtra Arguments\n\ngf::AbstractArray: green's function associated with fs.mesh and p.λ & p.μ\np::RateStateQuasiDynamicProperty: all system properties\nu0::ArrayPartition: initial condition. By rule of order in this package:\nvelocity\nstate\n\ntspan::NTuple: time span for simulation\nflf::FrictionLawForm: form of friction law, either CForm or RForm\nse::StateEvolutionLaw: state evolutional law, see StateEvolutionLaw\n\n\n\n\n\n","category":"method"},{"location":"interface_assemble/#Quaycle.assemble-Tuple{Quaycle.ViscoelasticCompositeGreensFunction,ViscoelasticMaxwellProperty,ArrayPartition,Tuple{T,T} where T}","page":"Assemble","title":"Quaycle.assemble","text":"assemble(gf::ViscoelasticCompositeGreensFunction, p::ViscoelasticMaxwellProperty,\n    u0::ArrayPartition, tspan::NTuple{2};\n    flf::FrictionLawForm=RForm(), se::StateEvolutionLaw=DieterichStateLaw(),)\n\nAssemble the ODEProblem for elastic fault plus viscoelastic relaxation.\n\nArguments\n\ngf::ViscoelasticCompositeGreensFunction: green's function associated with the composite space fas\np::ViscoelasticCompositeGreensFunction: all system properties\nu0::ArrayPartition: initial condition. By rule of order in this package:\nvelocity\nstate\nstrain\nstress\n\ntspan::NTuple: time span for simulation\nflf::FrictionLawForm: form of friction law, either CForm or RForm\nse::StateEvolutionLaw: state evolutional law, see StateEvolutionLaw\n\n\n\n\n\n","category":"method"},{"location":"interface_assemble/#Quaycle.assemble-Union{Tuple{T}, Tuple{SingleDofRSFProperty,AbstractArray,Tuple{Vararg{T,N}} where T where N}} where T<:Real","page":"Assemble","title":"Quaycle.assemble","text":"assemble(p::SingleDofRSFProperty, u0::AbstractArray, tspan::NTuple;\n    flf::FrictionLawForm=CForm(), se::StateEvolutionLaw=DieterichStateLaw())\n\nAssemble the ODEProblem for single degree of freedom system.\n\nArguments\n\np::SingleDofRSFProperty: all system properties\nu0::AbstractArray: initial condition\ntspan::NTuple: time span for simulation\nflf::FrictionLawForm: form of friction law, either CForm or RForm\nse::StateEvolutionLaw: state evolutional law, see StateEvolutionLaw\n\n\n\n\n\n","category":"method"},{"location":"interface_assemble/#References-1","page":"Assemble","title":"References","text":"","category":"section"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"Rice, J. (1993). Spatio-temporal complexity of slip on a fault. Journal of Geophysical Research: Solid Earth, 98(B6), 9885–9907. https://doi.org/10.1029/93JB00191","category":"page"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"Liu, Y., McGuire, J. J., & Behn, M. D. (2012). Frictional behavior of oceanic transform faults and its influence on earthquake characteristics. Journal of Geophysical Research: Solid Earth, 117(B4). https://doi.org/10.1029/2011JB009025","category":"page"},{"location":"interface_assemble/#","page":"Assemble","title":"Assemble","text":"Barbot, S. (2018). Asthenosphere Flow Modulated by Megathrust Earthquake Cycles. Geophysical Research Letters, 45(12), 6018–6031. https://doi.org/10.1029/2018GL078197","category":"page"},{"location":"interface_mesh/#Mesh-1","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"This package provides some buildin structured mesh functionality and some   data structures coupled with existing Green's functions where users could   explore external mesh tools.","category":"page"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"This package also has rich utilities based on Gmsh.   To use them, it is recommended to install   GmshTools.jl which   automatically downloads Gmsh SDK and provides a few convenient macros.","category":"page"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"pkg> add GmshTools\njulia> using Quaycle\njulia> using GmshTools","category":"page"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"Users are encouraged to read Gmsh Julia API for more comprehensive operations.","category":"page"},{"location":"interface_mesh/#Public-Interface-1","page":"Mesh","title":"Public Interface","text":"","category":"section"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"Modules = [Quaycle]\nPages = [\"mesh.jl\", \"gmshtools.jl\", \"space.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_mesh/#Quaycle.gen_mesh","page":"Mesh","title":"Quaycle.gen_mesh","text":"gen_mesh(::Val{:AntiPlaneHex8}, ma::SBarbotHex8MeshEntity, ratio::Real=1e4)\n\n\n\n\n\n","category":"function"},{"location":"interface_mesh/#Quaycle.gen_mesh-Union{Tuple{T}, Tuple{Val{:LineOkada},T,T,T}} where T","page":"Mesh","title":"Quaycle.gen_mesh","text":"gen_mesh(::Val{:LineOkada}, ξ::T, Δξ::T, dip::T)\n\nGenerate LineOkadaMesh\n\nArguments\n\nξ: downdip length\nΔξ: downdip interval\ndip: dipping angle\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_mesh-Union{Tuple{T}, Tuple{Val{:RectOkada},T,T,T,T,T}} where T","page":"Mesh","title":"Quaycle.gen_mesh","text":"gen_mesh(::Val{:RectOkada}, x::T, ξ::T, Δx::T, Δξ::T, dip::T)\n\nGenerate RectOkadaMesh\n\nArguments\n\nx: along strike length\nξ: downdip length\nΔx: along strike interval\nΔξ: downdip interval\ndip: dipping angle\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Tuple{Quaycle.LineOkadaMesh}","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(mf::OkadaMesh; kwargs...)\n\nGenerate an equivalent unstructured mesh as mf::OkadaMesh\n\nArguments\n\nmf::OkadaMesh: the structured mesh\nkwargs...: stay the same as other methods for gen_gmsh_mesh\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{I}, Tuple{T}, Tuple{Quaycle.RectOkadaMesh,Val{:BoxHexExtrudeFromSurface},T,T,T,T,T,T,I,I,T,T,AbstractArray{T,1} where T,AbstractArray{T,1} where T}} where I where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(mf::RectOkadaMesh,\n    ::Val{:BoxHexByExtrude},\n    llx::T, lly::T, llz::T, dx::T, dy::T, dz::T, nx::I, ny::I,\n    rfx::T, rfy::T, rfzn::AbstractVector, rfzh::AbstractVector;\n    filename::AbstractString=\"temp.msh\") where {T, I}\n\nGenerate a mesh combinating RectOkadaMesh and BoxHexExtrudeFromSurface mesh for asthenosphere.     The first argument is the corresponding RectOkadaMesh, the rest ones stay the same.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{I}, Tuple{T}, Tuple{Val{:BoxHexExtrudeFromSurface},T,T,T,T,T,T,I,I,T,T,AbstractArray{T,1} where T,AbstractArray{T,1} where T}} where I where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(::Val{:BoxHexByExtrude},\n    llx::T, lly::T, llz::T, dx::T, dy::T, dz::T, nx::I, ny::I,\n    rfx::T, rfy::T, rfzn::AbstractVector, rfzh::AbstractVector;\n    filename::AbstractString=\"temp.msh\") where {T, I}\n\nGernate a box for Asthenosphere using 8-node hexahedron     elements (via setting transfinite curve).\n\nArguments\n\nllx, lly, llz: coordinates of low-left corner on the top surface\ndx, dy, dz: x-, y-, z-extension\nnx, ny: number of cells along x-, y-axis\nrfx, rfy: refinement coefficients along x-, y-axis using Bump algorithm, please refer gmsh.model.geo.mesh.setTransfiniteCurve\nrfzn: number of cells along z-axis, please refer numElements in gmsh.model.geo.extrude\nrfzh: accumulated height of cells along z-axis, please refer heights in gmsh.model.geo.extrude\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{S}, Tuple{I}, Tuple{T}, Tuple{Quaycle.RectOkadaMesh,Val{:InPlaneX},T,T,T,T,T,T,I,I}} where S where I where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(mf::RectOkadaMesh, ::Val{:InPlaneX},\n    llx::T, lly::T, llz::T, dx::T, dy::T, dz::T, nx::I, nv::I;\n    rfxstr::S=\"Bump\", rfx::T=1.0,\n    rfvstr::S=\"Progression\", rfv::T=1.0,\n    filename=\"temp.msh\", reg::Integer=1,\n    faulttag=(1, \"fault\"), asthenospheretag=(2, \"asthenosphere\")) where {T, I, S}\n\nGenerate an rectangle with one side parallel to YZ plane along with a Rect Okada mesh.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{S}, Tuple{I}, Tuple{T}, Tuple{Val{:InPlaneX},T,T,T,T,T,T,I,I}} where S where I where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(::Val{:InPlaneX},\n    llx::T, lly::T, llz::T, dx::T, dy::T, dz::T, nx::I, nv::I;\n    rfxstr::S=\"Bump\", rfx::T=1.0,\n    rfvstr::S=\"Progression\", rfv::T=1.0,\n    filename::AbstractString=\"temp.msh\", reg::Integer=1) where {T, I, S}\n\nGenerate an rectangle with one side parallel to YZ plane.\n\nArguments\n\nllx, lly, llz: coordinates of low-left corner on the top surface\ndx, dy, dz: x-, y-, z-extension\nnx, nv: number of cells along x-, vertical-axis\n\nKWARGS\n\nrfxstr, rfx, rfvstr, rfv: the transfinite mesh parameters, see Gmsh docs.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{T}, Tuple{Val{:LineOkada},T,T,T}} where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(::Val{:LineOkada}, ξ::T, Δξ::T, dip::T;\n    filename::AbstractString=\"temp.msh\", reg::Integer=1) where T\n\nGenerate equivalent LineOkadaMesh via Gmsh buildin engine.\n\nExtra Arguments\n\nfilename::AbstractString=\"temp.msh\": name of the generated mesh file. The file ext will be automatically handled by Gmsh.\nreg::Integer=1: the starting tag for entity of any dimension\n\nThe rest arguments stay the same as gen_mesh.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gen_gmsh_mesh-Union{Tuple{T}, Tuple{Val{:RectOkada},T,T,T,T,T}} where T","page":"Mesh","title":"Quaycle.gen_gmsh_mesh","text":"gen_gmsh_mesh(::Val{:RectOkada}, x::T, ξ::T, Δx::T, Δξ::T, dip::T;\n    filename::AbstractString=\"temp.msh\", reg::Integer=1) where T\n\nGenerate equivalent RectOkadaMesh via Gmsh buildin engine.\n\nExtra Arguments\n\nfilename::AbstractString=\"temp.msh\": name of the generated mesh file. The file ext will be automatically handled by Gmsh.\nreg::Integer=1: the starting tag for entity of any dimension\n\nThe rest arguments stay the same as gen_mesh.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gmsh_vtk_output_cache-Union{Tuple{I}, Tuple{AbstractString,I,I}} where I<:Integer","page":"Mesh","title":"Quaycle.gmsh_vtk_output_cache","text":"gmsh_vtk_output_cache(file::AbstractString, phydim::I, phytag::I) where I<:Integer\n\nCreate cache of unstructured mesh for VTK output.\n\nArguments\n\nfile::AbstractString: mesh file\nphydim: physical group dimension, which you will querry\nphytag: physical group tag associated with phydim. If smaller than 0,   retrieve all entities in physical group whose dimension is phydim. If in this case, only one   such entity, binded with that physical group, shall exist. If you would like to write multi-block data,   create VTK output caches for each physical group.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.gmsh_vtk_output_cache-Union{Tuple{N}, Tuple{AbstractString,Quaycle.OkadaMesh{N}}, Tuple{AbstractString,Quaycle.OkadaMesh{N},Integer}, Tuple{AbstractString,Quaycle.OkadaMesh{N},Integer,Any}} where N","page":"Mesh","title":"Quaycle.gmsh_vtk_output_cache","text":"gmsh_vtk_output_cache(file::AbstractString, mf::OkadaMesh{N}, phytag::Integer=-1, datatype=Float64) where N\n\nCreate cache of structured OkadaMesh for VTK output, which handles the data mapping from structured data     to unstructured mesh. It's worth mention that currently WriteVTK     cannot write inclined plane in 3D space. As a workround, it seeks transfering from Gmsh unstructured (transfinite)     mesh.\n\nArguments\n\nfile::AbstractString: mesh file containing fault mesh (transfinite)\nmf::OkadaMesh{N}: equivalent structured mesh, must match unstructured mesh in the file above\nphytag::Integer=-1: physical group tag associated with fault mesh in the mesh file. If smaller than 0,   retrieve all entities in physical group whose dimension is determined by mf. If in this case, only one   such entity, assumed to be the fault, shall exist.\ndatatype=Float64: data type for temporary array storing the mapped data\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.read_gmsh_mesh-Tuple{Val{:InPlaneX},AbstractString}","page":"Mesh","title":"Quaycle.read_gmsh_mesh","text":"read_gmsh_mesh(::Val{:InPlaneX}, f::AbstractString; phytag::Integer=2, inxz::Bool=true)\n\nRead the mesh and construct mesh entity infomation for SBarbot Quad4 in-plane (x-z, no y) Green's function use.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.read_gmsh_mesh-Tuple{Val{:SBarbotHex8},AbstractString}","page":"Mesh","title":"Quaycle.read_gmsh_mesh","text":"read_gmsh_mesh(::Val{:SBarbotHex8}, f::AbstractString;\n    phytag::Integer=-1, rotate::Number=0.0, reverse=false, check=false)\n\nRead the mesh and construct mesh entity infomation for SBarbot Hex8 Green's function use.\n\nArguments\n\nf: mesh file name\nphytag: physical tag for targeting volume entity. If smaller than 0, retrieve all elements in all 3-dimensional entities. If in   this case, your mesh must contain only one element type, which should be Hex8\nrotate: the angle of strike direction, see sbarbot_disp_hex8!. If your meshing box isn't parallel to x, y-axis, your must   provide your strike angle manually. By default, the strike angle is zero\nreverse: if true, reverse the along-x, y-node tag during read. By default, 1→4 in x-axis, 1→2 in y-axis, 1→5 in z-axis\ncheck: if true, check that number of distinctive q1 equals that of x1, same for q2 and x2 at orthogonal direction,   which should hold for transfinite mesh.\n\nNotice\n\nThis function can only be used for Hex8 element with each element lying parallel to z-axis.\nThe check procedure is not complete for arbitrary strike angle (0 < θ < 90). The user should take a close   look on the node ordering for one element to ensure the x-, y-extent are correctly resolved by change reverse accordingly.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.read_gmsh_mesh-Tuple{Val{:SBarbotTet4},AbstractString}","page":"Mesh","title":"Quaycle.read_gmsh_mesh","text":"read_gmsh_mesh(::Val{:SBarbotTet4}, f::AbstractString; phytag::Integer=-1)\n\nRead the mesh and construct mesh entity infomation for SBarbot Tet4 Green's function use.\n\nArguments\n\nf: mesh file name\nphytag: physical tag for targeting volume entity. If smaller than 0, retrieve all elements in all 3-dimensional entities. If in   this case, your mesh must contain only one element type, which should be Tet4.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.read_gmsh_mesh-Tuple{Val{:TDTri3},AbstractString}","page":"Mesh","title":"Quaycle.read_gmsh_mesh","text":"read_gmsh_mesh(::Val{:TDTri3}, f::AbstractString; phytag::Integer=-1)\n\nRead the mesh and construct mesh entity infomation for triangular Green's function use.\n\nArguments\n\nf: mesh file name\nphytag: physical tag for targeting volume entity. If smaller than 0, retrieve all elements in all 2-dimensional entities. If in   this case, your mesh must contain only one element type, which should be Tri3.\natol: absolute tolerance, by default 1e-12, to determine whether the triangle is parallel to axis.   If this reading procedure does not resolve the slip direction correctly, try to lower this value.\n\n\n\n\n\n","category":"method"},{"location":"interface_mesh/#Quaycle.DIPPING","page":"Mesh","title":"Quaycle.DIPPING","text":"Dipping, indicate dislocation occurs at downdip direction.\n\n\n\n\n\n","category":"type"},{"location":"interface_mesh/#Quaycle.STRIKING","page":"Mesh","title":"Quaycle.STRIKING","text":"Striking, indicate dislocation occurs at strike direction.\n\n\n\n\n\n","category":"type"},{"location":"interface_mesh/#References-1","page":"Mesh","title":"References","text":"","category":"section"},{"location":"interface_mesh/#","page":"Mesh","title":"Mesh","text":"Geuzaine, C., & Remacle, J.-F. (2009). Gmsh: A 3-D finite element mesh generator with built-in pre- and post-processing facilities. International Journal for Numerical Methods in Engineering, 79(11), 1309–1331. https://doi.org/10.1002/nme.2579","category":"page"},{"location":"interface_HDF5/#HDF5-Utilities-1","page":"HDF5 Utility","title":"HDF5 Utilities","text":"","category":"section"},{"location":"interface_HDF5/#","page":"HDF5 Utility","title":"HDF5 Utility","text":"To use HDF5 functionality,","category":"page"},{"location":"interface_HDF5/#","page":"HDF5 Utility","title":"HDF5 Utility","text":"pkg> add HDF5\n\njulia> using Quaycle\njulia> using HDF5","category":"page"},{"location":"interface_HDF5/#","page":"HDF5 Utility","title":"HDF5 Utility","text":"This package provides a bunch of utilities, such as storing simulation properties   and writing ODE solution on the fly to HDF5 format file for postprocessing on   different platform and package version. We currently don't support automatically saving   green's function to HDF5 due to its limitation of natively storing complex number.","category":"page"},{"location":"interface_HDF5/#","page":"HDF5 Utility","title":"HDF5 Utility","text":"It's worth mention that JLD and JLD2 are also excellent alternatives but they storing the whole type information that may broke read when this package changes or remove certain type definitions. Users may choose them as auxiliary tools.","category":"page"},{"location":"interface_HDF5/#Public-Interface-1","page":"HDF5 Utility","title":"Public Interface","text":"","category":"section"},{"location":"interface_HDF5/#","page":"HDF5 Utility","title":"HDF5 Utility","text":"Modules = [Quaycle]\nPages = [\"h5getstore.jl\", \"h5solution.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_HDF5/#Quaycle.store-Tuple{AbstractString,Quaycle.AbstractProperty}","page":"HDF5 Utility","title":"Quaycle.store","text":"store(filename::AbstractString, p::AbstractProperty)\n\nStore property in HDF5.\n\nArguments\n\nfilename::AbstractString: file name to be used\np::AbstractProperty: property to be saved\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.@getprop-Tuple{Any}","page":"HDF5 Utility","title":"Quaycle.@getprop","text":"@getprop filename\n\nRead property stored in HDF5.\n\nArguments\n\nfilename: file name. Assume it   has one and only one kind of property group.\n\n\n\n\n\n","category":"macro"},{"location":"interface_HDF5/#Quaycle.@store-Tuple{Any,Any}","page":"HDF5 Utility","title":"Quaycle.@store","text":"@store filename::AbstractString p::AbstractProperty\n\nMacro shortcut for storing property in HDF5.\n\nArguments\n\nfilename::AbstractString: file name to be used\np::AbstractProperty: property to be saved\n\n\n\n\n\n","category":"macro"},{"location":"interface_HDF5/#Quaycle.h5trimsolution-Union{Tuple{S}, Tuple{S,S,Any,AbstractArray{T,1} where T,Function}, Tuple{S,S,Any,AbstractArray{T,1} where T,Function,Function}} where S","page":"HDF5 Utility","title":"Quaycle.h5trimsolution","text":"h5trimsolution(fin::S, fout::S, tstr, ustrs::AbstractVector,\n    predu::Function, predt::Function=(x)->true; nstep::Integer=10000) where S\n\nTrim the solution in and HDF5 file fin, for instance by using wsolve, according to prediction functions predu and predt     for fields specified by ustrs. Time data field is denoted by tstr. Outputs are stored in fout.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.wsolve-Tuple{ODEProblem,OrdinaryDiffEqAlgorithm,Any,Any,Any,Any,Any}","page":"HDF5 Utility","title":"Quaycle.wsolve","text":"wsolve(prob::ODEProblem, alg::OrdinaryDiffEqAlgorithm,\n    file, nstep, getu, ustrs, tstr; kwargs...)\n\nWrite the solution to HDF5 file while solving the ODE. The interface     is exactly the same as     solve an ODEProblem     except a few more about the saving procedure. Notice, it will set     save_everystep=false so to avoid memory blow up. The return code     will be written as an attribute in tstr data group.\n\nExtra Arguments\n\nfile::AbstractString: name of file to be saved\nnstep::Integer: number of steps after which a saving operation will be performed\ngetu::Function: function handler to extract desired solution for saving\nustr::AbstractVector: list of names to be assigned for each components, whose   length must equal the length of getu output\ntstr::AbstractString: name of time data\n\nKWARGS\n\nstride::Integer=1: downsampling rate for saving outputs\nappend::Bool=false: if true then append solution after the end of file\nforce::Bool=false: force to overwrite the existing solution file\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚬′-Tuple{ArrayPartition,Any,Any}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚬′","text":"Retrieve velocity and strain rate\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯-Tuple{ArrayPartition,Vararg{Any,N} where N}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯","text":"Retrieve velocity and state.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯𝚫-Tuple{ArrayPartition,Vararg{Any,N} where N}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯𝚫","text":"Retrieve velocity, state and slip.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯𝚬-Tuple{ArrayPartition,Vararg{Any,N} where N}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯𝚬","text":"Retrieve velocity, state and strain.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯𝚬′-Tuple{ArrayPartition,Any,Any}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯𝚬′","text":"Retrieve velocity, state and strain rate.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯𝚬′𝚫-Tuple{ArrayPartition,Any,Any}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯𝚬′𝚫","text":"Retrieve velocity, state, strain rate and slip.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.𝐕𝚯𝚬𝚺-Tuple{ArrayPartition,Vararg{Any,N} where N}","page":"HDF5 Utility","title":"Quaycle.𝐕𝚯𝚬𝚺","text":"Retrieve velocity, state, strain and stress.\n\n\n\n\n\n","category":"method"},{"location":"interface_HDF5/#Quaycle.@h5savecallback-NTuple{5,Any}","page":"HDF5 Utility","title":"Quaycle.@h5savecallback","text":"@h5savecallback(filename, tend, nsteps, usize, T)\n\nConstruct a FunctionCallingCallback for incrementally stored output into HDF5 file.     This callback function only works for naive output arrays whose shape look like A[..., :, :, :, ...].     It is suggested to use this macro at top-level scope since it contains eval.\n\nArguments\n\nfilename: file name to be stored\ntend: end time of simulation\nnsteps: after nsteps steps, a saving operation is performed otherwise caching them\nT: type of stored data\n\n\n\n\n\n","category":"macro"},{"location":"interface_visualize/#Visualize-1","page":"Visualize","title":"Visualize","text":"","category":"section"},{"location":"interface_visualize/#","page":"Visualize","title":"Visualize","text":"This package provides some utilities for writing results to VTK (vts, vti, vtu, vtm, pvd, etc...)   file for postprocessing with Paraview. Data cache for   writing results are also implemented where users could explore other meshing tools.","category":"page"},{"location":"interface_visualize/#","page":"Visualize","title":"Visualize","text":"One short note is that if you store 6 components vector, for example σ,   Paraview will interpret them in the order of   σ_xx, σ_yy, σ_zz, σ_xy, σ_yz, σ_xz.   Whereas in our assemble for stress, the order, same as e.g OpenFOAM, is   σ_xx, σ_xy, σ_xz, σ_yy, σ_yz, σ_zz.","category":"page"},{"location":"interface_visualize/#","page":"Visualize","title":"Visualize","text":"Notice that these function are not fully tested. If you encounter any problem,   please file an issue with your MWE.","category":"page"},{"location":"interface_visualize/#Public-Interface-1","page":"Visualize","title":"Public Interface","text":"","category":"section"},{"location":"interface_visualize/#","page":"Visualize","title":"Visualize","text":"Modules = [Quaycle]\nPages = [\"visualize.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_visualize/#Quaycle.vtk_output-Tuple{Any,AbstractArray{T,1} where T,AbstractArray{#s44,1} where #s44<:AbstractArray,AbstractArray{#s40,1} where #s40<:AbstractString,Quaycle.ParaviewOutputCache}","page":"Visualize","title":"Quaycle.vtk_output","text":"vtk_output(f, t::AbstractVector, u::AbstractVector{<:AbstractVecOrMat},\n    ustr::AbstractVector{<:AbstractString}, cache::ParaviewOutputCache)\n\nWrite time-series results to single-block paraview collection file.\n\nArguments\n\nf: output file name\nt::AbstractVector: time stamp vector\nu::AbstractVector{<:AbstractArray}, list of results to be written\nustr::AbstractVector{<:AbstractString}: list results names to be assigned\ncache: cache of data conversion, cell information and nodes information\n\n\n\n\n\n","category":"method"},{"location":"interface_visualize/#Quaycle.vtk_output-Tuple{Any,AbstractArray{T,1} where T,AbstractArray{#s46,1} where #s46<:AbstractString,Quaycle.ParaviewOutputCache}","page":"Visualize","title":"Quaycle.vtk_output","text":"vtk_output(f, u::AbstractVector{<:AbstractVecOrMat},\n    ustr::AbstractVector{<:AbstractString}, cache::ParaviewOutputCache)\n\nWrite results to single-block VTU file.\n\nArguments\n\nf: output file name\nu::AbstractVector, list of results to be written\nustr::AbstractVector{<:AbstractString}: list results names to be assigned\ncache: cache of data conversion, cell information and nodes information\n\n\n\n\n\n","category":"method"},{"location":"interface_visualize/#Quaycle.vtk_output-Tuple{Any,Any,Any,AbstractArray{#s44,1} where #s44<:Quaycle.ParaviewOutputCache}","page":"Visualize","title":"Quaycle.vtk_output","text":"vtk_output(f, u, ustr, cache::AbstractVector{<:ParaviewOutputCache})\n\nWrite results to multiple-block VTM file.\n\nArguments\n\nf: output file name\nu, list of block to be written, each contains a list of results   in that block\nustr: list of block to be assigned, each contains a list of results names   to data in that block\ncache: list cache corresponding to each block\n\n\n\n\n\n","category":"method"},{"location":"interface_visualize/#Quaycle.vtk_output-Tuple{Any,Any,Any,Any,AbstractArray{#s40,1} where #s40<:Quaycle.ParaviewOutputCache}","page":"Visualize","title":"Quaycle.vtk_output","text":"vtk_output(f, t, u, ustr, cache::AbstractVector{<:ParaviewOutputCache})\n\nWrite results to multiple-block paraview collection file.\n\nArguments\n\nf: output file name\nt::AbstractVector: time stamp vector\nu, list of different block data to be written, each contains a list of results   in that block\nustr: list of block names to be assigned, each contains a list of results names   to data in that block\ncache: list cache corresponding to each block\n\n\n\n\n\n","category":"method"},{"location":"interface_visualize/#Quaycle.vtk_output-Tuple{Any,Quaycle.AbstractProperty,Quaycle.ParaviewOutputCache}","page":"Visualize","title":"Quaycle.vtk_output","text":"vtk_output(f, p::AbstractProperty, cache::ParaviewOutputCache)\n\nStore simulation property, including all its fields, to VTU file.\n\nArguments\n\nf: output file name\np: property struct\ncache: cache of data conversion, cell information and nodes information\n\nNotice\n\nNot all AbstractProperty are supported. Only those with well defined fieldnames     are. For multi-block domain property, save them separately.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Green's-Function-1","page":"Greens Function","title":"Green's Function","text":"","category":"section"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"The interactions among fault patches, asthenosphere elements as well as   between fault and asthenosphere are computed via convolution of Green's   Function. Currently supported Green's Function:","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"1D elastic line dislocation\n2D elastic rectangular dislocation\n2D elastic triangular dislocation\n3D inelastic strain in Hex8 or Tet4 elements","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Other types, such as 2D inelastic (plane stress or antiplane stress), polygon dislocation, are WIP (PR are welcome!).","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"All functions translated here are ensured to be type stable and have minimum allocation. Broadcasting isn't supported here (why?) so you can easily embed them into multiprocessors parallel computation, which is implemented here.","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Also be aware of the coordinate system difference among all the Green's function   provided here. Users are encouraged to view the original sources for further   details. This package preserves the original coordinate systems as well as   function arguments for all, whose outcomes are also tested against original ones.","category":"page"},{"location":"interface_greensfun/#Public-Interface-1","page":"Greens Function","title":"Public Interface","text":"","category":"section"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Modules = [Quaycle]\nPages = [\"gf.jl\", \"gf_dislocation.jl\", \"gf_strain.jl\", \"gf_operator.jl\",\n         \"okada_dc3d.jl\", \"sbarbot_hex8.jl\", \"sbarbot_tet4.jl\", \"nikkhoo_td.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_greensfun/#Quaycle.compose_stress_greens_func-Union{Tuple{N}, Tuple{AbstractArray,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{#s45,N}} where #s45<:Tuple,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N}, Tuple{AbstractArray,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{#s44,N}} where #s44<:Tuple,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N,Symbol}} where N","page":"Greens Function","title":"Quaycle.compose_stress_greens_func","text":"compose_stress_greens_func(ee::AbstractArray, ev::NTuple, ve::NTuple, vv::NTuple{N, <:Tuple},\n    ϵcomp::NTuple, σcomp::NTuple) where N\n\nConcatenate tuple of matrix or tuple of tuple of matrix which arrange them in     a way to update traction/stress rate using only one BLAS call. It does nothing     to the elastic Green's function and specifically used for the outputs from     stress_greens_func and stress_greens_func.\n\nArguments\n\nee::AbstractArray: traction Green's function within the elastic fault\nev::NTuple: stress Green's function from elastic fault to inelastic asthenosphere\nve::NTuple: traction Green's function inelastic asthenosphere to elastic fault\nvv::NTuple: stress Green's function within inelastic asthenosphere\nϵcomp: strain component to be considered, must be a subset of σcomp\nσcomp: stress component to be considered\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.compose_stress_greens_func-Union{Tuple{T}, Tuple{Quaycle.AbstractMesh{2},Quaycle.SBarbotMeshEntity,T,T,Quaycle.PlaneFault,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N}, Tuple{Quaycle.AbstractMesh{2},Quaycle.SBarbotMeshEntity,T,T,Quaycle.PlaneFault,Tuple{Vararg{T,N}} where T where N,Tuple{Vararg{T,N}} where T where N,Symbol}} where T","page":"Greens Function","title":"Quaycle.compose_stress_greens_func","text":"compose_stress_greens_func(mf::OkadaMesh, me::SBarbotMeshEntity,\n    λ::T, μ::T, ft::PlaneFault, comp::NTuple{N, <:Symbol}) where {T, N}\n\nShortcut function for computing all 4 Green's function for viscoelastic relaxation.     Arguments stays the same as stress_greens_func.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{N}, Tuple{I}, Tuple{T}, Tuple{Quaycle.AbstractMesh{2},Quaycle.SBarbotMeshEntity{I},T,T,Quaycle.FlatPlaneFault,Tuple{Vararg{Symbol,N}}}} where N where I where T<:Real","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(mf::AbstractMesh{2}, ma::SBarbotMeshEntity,\n    λ::T, μ::T, ft::FlatPlaneFault,\n    σcomp::NTuple{N, Symbol}; kwargs...) where {T<:Real, I<:Integer, N}\n\nCompute stress Green's function from fault mesh to asthenosphere mesh.\n\nArguments\n\nmf::AbstractMesh{2}: mesh of fault\nma::SBarbotMeshEntity{3}: mesh of asthenosphere\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nft::FlatPlaneFault: fault type, either DIPPING() or STRIKING()\nσcomp::NTuple{N, Symbol}: stress components to consider\n\nKWARGS Arguments\n\nThe same as previously mentioned:\n\nnrept::Integer\nbuffer_ratio::Real\n\nOutput\n\nThe output is a tuple of length(σcomp) matrix, each corresponds σ_ij in the same order     as given by σcomp.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{T}, Tuple{Quaycle.LineOkadaMesh,T,T,Quaycle.FlatPlaneFault}} where T","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(mesh::LineOkadaMesh, λ::T, μ::T, ft::FlatPlaneFault; kwargs...) where T\n\nCompute traction Green function in 1-D elastic fault in LineOkadaMesh.\n\nArguments\n\nmesh::LineOkadaMesh: the line mesh coupled with dc3d\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nft::FlatPlaneFault: fault type, either DIPPING() or STRIKING()\n\nKWARGS Arguments\n\nax_ratio::Real: ratio of along-strike to along-downdip, default is 12.5\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{T}, Tuple{Quaycle.RectOkadaMesh,T,T,Quaycle.FlatPlaneFault}} where T","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(mesh::RectOkadaMesh, λ::T, μ::T, ft::FlatPlaneFault;\n    fourier_domain=true, kwargs...) where T\n\nCompute traction Green's function in 2-D elastic fault in RectOkadaMesh. Translational symmetry is considered.\n\nArguments\n\nmesh::RectOkadaMesh: the rectangular mesh coupled with dc3d\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nft::FlatPlaneFault: fault type, either DIPPING() or STRIKING()\n\nKWARGS Arguments\n\nfourier_domain::Bool: whether or not transform the tensor to fourier domain\nnrept::Integer: number of periodic summation is performed\nbuffer_ratio::Real: ratio of length of buffer zone (along-strike) to that of fault (along-strike)   It is recommended to set at least 1 for strike-slip fault for mimicing zero-dislocation at ridge on both sides.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{T}, Tuple{Quaycle.TDTri3MeshEntity,T,T,Quaycle.FlatPlaneFault}} where T","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(mesh::TDTri3MeshEntity, λ::T, μ::T, ft::FlatPlaneFault; kwargs...) where T\n\nCompute traction Green's function in 2-D elastic fault in TDTri3MeshEntity.\n\nArguments\n\nmesh::TDTri3MeshEntity: the triangular mesh coupled with td_stress_hs\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nft::FlatPlaneFault: fault type, either DIPPING() or STRIKING()\n\nKWARGS Arguments\n\nnrept::Integer: number of periodic summation is performed\nbuffer_ratio::Real: ratio of length of buffer zone (along-strike) to that of fault (along-strike).   Notice the direction of strike is the average value of mesh.ss and the length is the strike projected   maximum horizontal expansion.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{N2}, Tuple{N1}, Tuple{T}, Tuple{Quaycle.SBarbotMeshEntity{3},T,T,Tuple{Vararg{Symbol,N1}},Tuple{Vararg{Symbol,N2}}}} where N2 where N1 where T","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(ma::SBarbotMeshEntity{3}, λ::T, μ::T,\n    ϵcomp::NTuple{N1, Symbol}, σcomp::NTuple{N2, Symbol}; kwargs...) where {T, N1, N2}\n\nCompute stress Green's function within SBarbotTet4MeshEntity or SBarbotHex8MeshEntity\n\nArguments\n\nma::SBarbotMeshEntity{3}: asthenosphere mesh\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nϵcomp: the strain ϵcomponent(s) to be considered\nσcomp::NTuple{N, Symbol}: stress components to consider\n\nOutput\n\nA tuple of n tuple of matrix, each tuple represents interaction from one strain component, w.r.t. ϵcomp     to the stress ϵcomponents, whose order is σ_ij whose order is the same as σcomp,     each of which is a matrix.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.stress_greens_func-Union{Tuple{N}, Tuple{T}, Tuple{Quaycle.SBarbotMeshEntity{3},Quaycle.AbstractMesh{2},T,T,Quaycle.PlaneFault,Tuple{Vararg{Symbol,N}}}} where N where T","page":"Greens Function","title":"Quaycle.stress_greens_func","text":"stress_greens_func(ma::SBarbotMeshEntity{3}, mf::AbstractMesh{2}, λ::T, μ::T, ft::PlaneFault,\n    ϵcomp::NTuple{N, Symbol}; kwargs...) where {T, N}\n\nCompute traction Green's function from SBarbotTet4MeshEntity or SBarbotHex8MeshEntity to RectOkadaMesh\n\nArguments\n\nma::SBarbotMeshEntity{3}: asthenosphere mesh\nmf::AbstractMesh{2}: fault mesh\nλ::T: Lamé's first parameter\nμ::T: shear modulus\nft::FlatPlaneFault: fault type, either DIPPING() or STRIKING()\nϵcomp: the strain ϵcomponent(s) to be considered\n\nOutput\n\nA tuple of n matrix, each represents interaction from one strain to the traction on fault.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.dc3d-Union{Tuple{A}, Tuple{T}, Tuple{T,T,T,T,T,T,Union{SubArray, A},Union{SubArray, A},A}} where A<:Union{AbstractArray{T,1}, AbstractArray{T,2}} where T<:Number","page":"Greens Function","title":"Quaycle.dc3d","text":"dc3d(x::T, y::T, z::T, α::T, dep::T, dip::T,\n    al::Union{A, SubArray}, aw::Union{A, SubArray}, disl::A\n    ) where {T <: Number, A <: AbstractVecOrMat{T}}\n\nCalculate displacements and gradient of displacements due to a rectangular dislocation     in an elastic isotropic halfspace.\n\nPlease see dc3d for details.     Also this fault coordinate system is widely used in this package.\n\nArguments\n\nx, y, z: observational position, where z  0\nα: elastic constant\ndep: depth of fault origin\ndip: dip angle in degree\nal: a vector of 2 numbers, indicating along strike (x-axis) spanning\naw: a vector of 2 numbers, indicating along downdip (y-z plane) spanning\ndisl: a vector of 3 numbers, indicating dislocation in along-strike,   along-downdip and tensile respectively.\n\nOutput\n\nA vector of 12 numbers, each is u_x, u_y, u_z, u_xx,     u_yx, u_zx, u_xy, u_yy, u_zy, u_xz     u_yz, u_zz.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.sbarbot_disp_hex8-Union{Tuple{R}, NTuple{18,R}} where R","page":"Greens Function","title":"Quaycle.sbarbot_disp_hex8","text":"sbarbot_disp_hex8(\n    x1::R, x2::R, x3::R, q1::R, q2::R, q3::R,\n    L::R, T::R, W::R, theta::R,\n    epsv11p::R, epsv12p::R, epsv13p::R, epsv22p::R, epsv23p::R, epsv33p::R,\n    G::R, nu::R,\n    ) where R\n\nCompute displacement arisen from inelastic strain in Hex8 elements.     Please see original version     for complete details, especially the coordinate system used here.\n\nArguments\n\nx1, x2, x3: observational position, where x_3  0\nq1, q2, q3: Hex8 element position, where q_3  0\nL, T, W: Hex8 element length, thickness and width\ntheta: strike angle\nepsv**: strain components, each is ϵ_11, ϵ_12, ϵ_13,   ϵ_22, ϵ_23, ϵ_33\nG: shear modulus\nnu: poisson ratio\n\nOutput\n\nA vector of 3 numbers, each represents u_1, u_2, u_3\n\nNotice\n\nInplace version: sbarbot_disp_hex8!(u, args...) where u is a vector of 3 numbers.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.sbarbot_stress_hex8-Union{Tuple{R}, NTuple{18,R}} where R","page":"Greens Function","title":"Quaycle.sbarbot_stress_hex8","text":"sbarbot_stress_hex8(\n    x1::R, x2::R, x3::R, q1::R, q2::R, q3::R,\n    L::R, T::R, W::R, theta::R,\n    epsv11p::R, epsv12p::R, epsv13p::R, epsv22p::R, epsv23p::R, epsv33p::R,\n    G::R, nu::R,\n    ) where R\n\nCompute stress arisen from inelastic strain in Hex8 elements.     Please see original version     for complete details, especially the coordinate system used here.\n\nArguments\n\nThe same as sbarbot_disp_hex8\n\nOutput\n\nA vector of 6 numbers, each represents σ_11, σ_12, σ_13,     σ_22, σ_23, σ_33\n\nNotice\n\nInplace version: sbarbot_stress_hex8!(u, args...) where u is a vector of 6 numbers.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.sbarbot_disp_tet4-Union{Tuple{Q}, Tuple{U}, Tuple{R}, Tuple{Q,R,R,R,U,U,U,U,R,R,R,R,R,R,R}} where Q where U where R","page":"Greens Function","title":"Quaycle.sbarbot_disp_tet4","text":"sbarbot_disp_tet4(quadrature::Q,\n    x1::R, x2::R, x3::R, A::U, B::U, C::U, D::U,\n    e11::R, e12::R, e13::R, e22::R, e23::R, e33::R, nu::R\n    ) where {R, U, Q}\n\nCompute displacement arisen from inelastic strain in Tet4 elements.     Please see original version     for complete details, especially the coordinate system used here.\n\nArguments\n\nquadrature: quadrature rule for integration, see   FastGaussQuadrature.jl\nx1, x2, x3: observational position, where x_3  0\nA, B, C, D: a list of 3 numbers for each, each of which represents   coordinates of the vertex. All depth coordinates must be greater or   equal to 0 (no checking is performed here)\ne**: strain components, each is ϵ_11, ϵ_12, ϵ_13,   ϵ_22, ϵ_23, ϵ_33\nnu: poisson ratio\n\nOutput\n\nA vector of 3 numbers, each represents u_1, u_2, u_3\n\nNotice\n\nInplace version: sbarbot_disp_tet4!(u, args...) where u is a vector of 3 numbers.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.sbarbot_stress_tet4-Union{Tuple{Q}, Tuple{U}, Tuple{R}, Tuple{Q,R,R,R,U,U,U,U,R,R,R,R,R,R,R,R}} where Q where U where R","page":"Greens Function","title":"Quaycle.sbarbot_stress_tet4","text":"sbarbot_stress_tet4(quadrature::Q,\n    x1::R, x2::R, x3::R, A::U, B::U, C::U, D::U,\n    e11::R, e12::R, e13::R, e22::R, e23::R, e33::R, G::R, nu::R\n    ) where {R, U, Q}\n\nCompute stress arisen from inelastic strain in Tet4 elements.     Please see original version     for complete details, especially the coordinate system used here.\n\nArguments\n\nquadrature: quadrature rule for integration, see   FastGaussQuadrature.jl\nx1, x2, x3: observational position\nA, B, C, D: a list of 3 numbers for each, each of which represents   coordinates of the vertex\ne**: strain components, each is ϵ_11, ϵ_12, ϵ_13,   ϵ_22, ϵ_23, ϵ_33\nG: shear modulus\nnu: poisson ratio\n\nOutput\n\nA vector of 6 numbers, each represents σ_11, σ_12, σ_13,     σ_22, σ_23, σ_33\n\nNotice\n\nInplace version: sbarbot_stress_tet4!(u, args...) where u is a vector of 6 numbers.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.td_disp_fs-Union{Tuple{V}, Tuple{T}, Tuple{T,T,T,V,V,V,T,T,T,T}} where V where T","page":"Greens Function","title":"Quaycle.td_disp_fs","text":"td_disp_fs(X::T, Y::T, Z::T, P1::V, P2::V, P3::V, Ss::T, Ds::T, Ts::T, nu::T) where {T, V}\n\nCompute displacement risen from triangular dislocation in elastic fullspace.     Please see original version (in supporting information)     for details, especially the coordinate system used here.\n\nArguments\n\nThe same as td_disp_hs\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.td_disp_hs-Union{Tuple{V}, Tuple{T}, Tuple{T,T,T,V,V,V,T,T,T,T}} where V where T","page":"Greens Function","title":"Quaycle.td_disp_hs","text":"td_disp_hs(X::T, Y::T, Z::T, P1::V, P2::V, P3::V, Ss::T, Ds::T, Ts::T, nu::T) where {T, V}\n\nCompute displacement risen from triangular dislocation in elastic halfspace.     Please see original version (in supporting information)     for details, especially the coordinate system used here.\n\nArguments\n\nX, Y, Z: observational coordinates\nP1, P2, P3: three triangular vertices coordinates respectively\nSs, Ds, Ts: triangular dislocation vector, Strike-slip, Dip-slip, Tensile-slip respectively\nnu: poisson ratio\n\nOutput\n\nBy order: u_x, u_y, u_z\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.td_stress_fs-Union{Tuple{V}, Tuple{T}, Tuple{T,T,T,V,V,V,T,T,T,T,T}} where V where T","page":"Greens Function","title":"Quaycle.td_stress_fs","text":"td_stress_fs(X::T, Y::T, Z::T, P1::V, P2::V, P3::V, Ss::T, Ds::T, Ts::T, λ::T, μ::T) where {T, V}\n\nCompute stress risen from triangular dislocation in elastic fullspace.     Please see original version (in supporting information)     for details, especially the coordinate system used here.\n\nArguments\n\nThe same as td_stress_hs\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#Quaycle.td_stress_hs-Union{Tuple{V}, Tuple{T}, Tuple{T,T,T,V,V,V,T,T,T,T,T}} where V where T","page":"Greens Function","title":"Quaycle.td_stress_hs","text":"td_stress_hs(X::T, Y::T, Z::T, P1::V, P2::V, P3::V, Ss::T, Ds::T, Ts::T, λ::T, μ::T) where {T, V}\n\nCompute stress risen from triangular dislocation in elastic halfspace.     Please see original version (in supporting information)     for details, especially the coordinate system used here.\n\nArguments\n\nX, Y, Z: observational coordinates\nP1, P2, P3: three triangular vertices coordinates respectively\nSs, Ds, Ts: triangular dislocation vector, Strike-slip, Dip-slip, Tensile-slip respectively\nλ: Lamé's first parameter\nμ: shear modulus\n\nOutput\n\nBy order: σ_xx, σ_yy, σ_zz,     σ_xy, σ_xz, σ_yz. Please be aware of its different order, where principle components     come first, against sbarbot_stress_hex8 and sbarbot_stress_tet4 aside from coordinate system difference.\n\n\n\n\n\n","category":"method"},{"location":"interface_greensfun/#References-1","page":"Greens Function","title":"References","text":"","category":"section"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Okada, Y. (1992). Internal deformation due to shear and tensile faults in a half-space. Bulletin of the Seismological Society of America, 82(2), 1018–1040.","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Pan, E., Yuan, J. H., Chen, W. Q., & Griffith, W. A. (2014). Elastic Deformation due to Polygonal Dislocations in a Transversely Isotropic Half‐SpaceElastic Deformation due to Polygonal Dislocations in a Transversely Isotropic Half‐Space. Bulletin of the Seismological Society of America, 104(6), 2698–2716. https://doi.org/10.1785/0120140161","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Nikkhoo, M., & Walter, T. R. (2015). Triangular dislocation: an analytical, artefact-free solution. Geophysical Journal International, 201(2), 1119–1141. https://doi.org/10.1093/gji/ggv035","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Barbot, S., Moore, J. D. P., & Lambert, V. (2017). Displacement and Stress Associated with Distributed Anelastic Deformation in a Half‐Space. Bulletin of the Seismological Society of America, 107(2), 821–855. https://doi.org/10.1785/0120160237","category":"page"},{"location":"interface_greensfun/#","page":"Greens Function","title":"Greens Function","text":"Barbot, S. (2018). Deformation of a Half‐Space from Anelastic Strain Confined in a Tetrahedral Volume. Bulletin of the Seismological Society of America, 108(5A), 2687–2712. https://doi.org/10.1785/0120180058","category":"page"},{"location":"interface_rheology/#Rheology-1","page":"Rheology","title":"Rheology","text":"","category":"section"},{"location":"interface_rheology/#","page":"Rheology","title":"Rheology","text":"This package implements plastic deformation as the key for modeling asthenosphere dynamics. Currently, only DiffusionCreep and DislocationCreep are supported.","category":"page"},{"location":"interface_rheology/#Public-Interface-1","page":"Rheology","title":"Public Interface","text":"","category":"section"},{"location":"interface_rheology/#","page":"Rheology","title":"Rheology","text":"Modules = [Quaycle]\nPages = [\"rheology.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_rheology/#Quaycle.DiffusionCreep","page":"Rheology","title":"Quaycle.DiffusionCreep","text":"dotϵ = A σ d^-m C_mathrmOH ^r expleft(αϕright) expleft(- fracQ + PVRTright)\n\n\n\n\n\n","category":"type"},{"location":"interface_rheology/#Quaycle.DislocationCreep","page":"Rheology","title":"Quaycle.DislocationCreep","text":"dotϵ = A τ^n-1 σ C_mathrmOH ^r expleft(αϕright) expleft(- fracQ + PVRTright)\n\n\n\n\n\n","category":"type"},{"location":"interface_rheology/#Quaycle.Peierls","page":"Rheology","title":"Quaycle.Peierls","text":"dotϵ = dotϵ_Pleft(fracσGright)^2 expleft(-fracΔF_k^oRTleft(1 - left(fracσσ_Pright)^rright)^sright)\n\n\n\n\n\n","category":"type"},{"location":"interface_rheology/#References-1","page":"Rheology","title":"References","text":"","category":"section"},{"location":"interface_rheology/#","page":"Rheology","title":"Rheology","text":"Hirth, G., & Kohlstedt, D. (2003). Rheology of the Upper Mantle and the Mantle Wedge: A View from the Experimentalists. In Inside the Subduction Factory (pp. 83–105). American Geophysical Union (AGU). https://doi.org/10.1029/138GM06","category":"page"},{"location":"interface_rheology/#","page":"Rheology","title":"Rheology","text":"Karato, S. (2010). Rheology of the Earth’s mantle: A historical review. Gondwana Research, 18(1), 17–45. https://doi.org/10.1016/j.gr.2010.03.004","category":"page"},{"location":"interface_rheology/#","page":"Rheology","title":"Rheology","text":"Kohlstedt, D. L., & Hansen, L. N. (2015). 2.18 - Constitutive Equations, Rheological Behavior, and Viscosity of Rocks. In G. Schubert (Ed.), Treatise on Geophysics (Second Edition) (pp. 441–472). Oxford: Elsevier. https://doi.org/10.1016/B978-0-444-53802-4.00042-7","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"EditURL = \"https://github.com/shipengcheng1230/Quaycle.jl/blob/master/docs/src/examples/bp1.jl\"","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"note: Note\nThis example is from Benchmark Problem 1 (hence referred as BP1).","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"First, we load the package","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"using Quaycle\nusing Plots","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"The prerequisite parameters in this benchmark are list below:","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"ms2mmyr = 365 * 86400 * 1e3 # convert velocity from m/s to mm/yr\nρ = 2670.0 # density [kg/m³]\nvs = 3464.0 # shear wave velocity [m/s]\nσ0 = 500.0 # effective normal stress [bar]\na0 = 0.010 # frictional paramter `a` in vw zone\namax = 0.025 # frictional paramter `a` in vs zone\nb0 = 0.015 # frictional paramter `b`\nL0 = 8.0 # critical distance [mm]\nvpl = 1e-9 * ms2mmyr # plate rate [mm/yr]\nvinit = 1e-9 * ms2mmyr # initial velocity [mm/yr]\nv0 = 1e-6 * ms2mmyr # reference velocity [mm/yr]\nf0 = 0.6 # reference frictional coefficient\nH = 15.0 # vw zone [km]\nh = 3.0 # vw-vs changing zone [km]\nWf = 40.0 # fault depth [km]\nΔz = 100.0e-3 # grid size interval [km]\ntf = 200.0; nothing # simulation time [yr]","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"warning: Warning\nMake sure your units are consistent across the whole variable space.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Then we arrive at some parameters that are implicit by above:","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"μ = vs^2 * ρ / 1e5 / 1e6 # shear modulus [bar·km/mm]\nλ = μ # poisson material\nη = μ / 2(vs * 1e-3 * 365 * 86400)\nngrid = round(Int, Wf / Δz); nothing # number of grids","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"First, set up a fault type which is strike-slip, and create a fault mesh by specifying depth and the desired discretization interval.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"ft = STRIKING()\nmesh = gen_mesh(Val(:LineOkada), 40.0, Δz, 90.0); nothing","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Computing the Green's function for this setting.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"gf = stress_greens_func(mesh, λ, μ, ft); nothing","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Then, provide the material properties w.r.t. our 'fault space'.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"a = a0 .* ones(mesh.nξ)\na[-mesh.z .≥ (H + h)] .= amax\na[H .< -mesh.z .< H + h] .= a0 .+ (amax - a0) / (h / Δz) * collect(1: Int(h / Δz))\nb = b0 .* ones(mesh.nξ)\nL = L0 .* ones(mesh.nξ)\nσ = σ0 .* ones(mesh.nξ)\nprop = RateStateQuasiDynamicProperty(a=a, b=b, L=L, σ=σ, vpl=vpl, f0=f0, v0=v0, η=η); nothing","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Next, construct the initial condition and ODE problem using Okada's Green's function.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"τ0 = σ0 * amax * asinh(vinit / 2v0 * exp((f0 + b0 * log(v0 / vinit)) / amax)) + η * vinit\nτz = fill(τ0, size(mesh.z))\nθz = @. L / v0 * exp(a / b0 * log(2v0 / vinit * sinh((τz - η * vinit) / a / σ)) - f0 / b0)\nvz = fill(vinit, size(mesh.ξ))\nδz = zeros(mesh.nξ)\nu0 = ArrayPartition(vz, θz, δz)\nprob = assemble(gf, prop,  u0, (0.0, tf)); nothing","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Check our depth profile now.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"plot(a .- b, mesh.z, label=\"a - b\", yflip=true, ylabel=\"Depth (km)\")","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Afterwards, solve ODE thanks to DifferentialEquations.jl","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"sol = solve(prob, TsitPap8(), reltol=1e-6, abstol=1e-6); nothing","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"tip: Tip\nRaise the accuracy option or switch to other algorithms if you get instability when solving these ODEs.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"Finally, check the results. The first event happens at around 196 year:","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"maxv = max_velocity(sol)\nplot(sol.t, log10.(maxv / ms2mmyr), xlabel=\"Time (year)\", ylabel=\"Max Velocity (log10 (m/s))\", xlims=(190, 200), label=\"\")","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"note: Note\nClick here for the slip evolution over 3000 years simulation. It may need some time to load the page.","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"","category":"page"},{"location":"examples/generated/bp1/#","page":"Example 1D","title":"Example 1D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"EditURL = \"https://github.com/shipengcheng1230/Quaycle.jl/blob/master/docs/src/examples/otfsync.jl\"","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"note: Note\nThis example is adapted from Wei, 2016 AGU","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"tip: Tip\nIt will automatically use parallel scheme if nprocs() ≂̸ 1 when building stiffness tensor. To do so:using Distributed\naddprocs(4); # add # of cores you desire\n@everywhere using Quaycle","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"First, list all the essential parameters:","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"using Quaycle\nusing Plots\n\nms2mmyr = 365 * 86400 * 1e3\nρ = 2670.0 # kg/m³\ncs = 3044.0 # m/s\nvpl = 100.0 # mm/yr\nv0 = 3.2e4 # mm/yr\nf0 = 0.6;\nμ = 0.3 # Bar·km/mm\nλ = μ # poisson material\nα = (λ + μ) / (λ + 2μ)\nη = μ / 2(cs * 1e-3 * 365 * 86400); nothing # Bar·yr/mm","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"First, create a fault mesh, specify fault type and compute the Green's function.","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"ft = STRIKING()\nmesh = gen_mesh(Val(:RectOkada), 80., 10., 0.5, 0.5, 90.0)\ngf = stress_greens_func(mesh, λ, μ, ft; buffer_ratio=1); nothing","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"tip: Tip\nIt is recommended (from Yajing Liu's personal communication) to add buffer zones adjacent the horizontal edges to immitate zero dislocation at the ridge region. Basically, it affects how the stiffness tensor are periodically summed. To what extent it alters the results remains further testing.Under the hood, it shall impose buffer areas on both sides of along-strike, each of which has a length of bufferratio/2*fa[:x]. Thus, the stiffness contributions falling into those buffer zone shall be neglected, which is equivalent to impose zero-slip correspondingly.","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"Next, establish frictional and fault space parameters:","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"a = ones(mesh.nx, mesh.nξ) .* 0.015\nb = ones(mesh.nx, mesh.nξ) .* 0.0115\nL = ones(mesh.nx, mesh.nξ) .* 12.0\n\nleft_patch = @. -25. ≤ mesh.x ≤ -5.\nright_patch = @. 5. ≤ mesh.x ≤ 25.\nvert_patch = @. -6. ≤ mesh.z ≤ -1\n\nb[xor.(left_patch, right_patch), vert_patch] .= 0.0185\n\nσmax = 500.\nσ = [min(σmax, 15. + 180. * z) for z in -mesh.z]\nσ = Matrix(repeat(σ, 1, mesh.nx)')\nprop = RateStateQuasiDynamicProperty(a=a, b=b, L=L, σ=σ, vpl=vpl, f0=f0, v0=v0, η=η); nothing","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"Then, provide the initial condition and assemble the ODEs:","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"vinit = vpl .* ones(mesh.nx, mesh.nξ)\nθ0 = L ./ vinit ./ 1.1\nδ0 = zeros(size(vinit))\nu0 = ArrayPartition(vinit, θ0, δ0)\nprob = assemble(gf, prop, u0, (0., 18.)); nothing","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"Afterwards, solve ODEs problem:","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"sol = solve(prob, VCABM5(), reltol=1e-5, abstol=1e-3); nothing","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"Last, take a look at the max velocity time series:","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"maxv = max_velocity(sol)\nplot(sol.t, log10.(maxv / ms2mmyr), xlabel=\"Time (year)\", ylabel=\"Max Velocity (log10 (m/s))\", label=\"\")","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"example: Example\nAn equivalent simulation using triangular dislocation Green's function is shown below. Notice it's far less performant than using rectangular disloction above.using Distributed\naddprocs(4)\n@everywhere using Quaycle\nusing GmshTools\nusing HDF5\nusing Plots\n\n## generate mesh\nfname = \"temp.msh\"\n@gmsh_do begin\n    reg = Quaycle.geo_rect_x(-40e3, 0.0, -10e3, 80e3, 0.0, 10e3, 1)\n    gmsh.model.addPhysicalGroup(2, [reg-1], 99)\n    gmsh.model.setPhysicalName(2, 99, \"FAULT\")\n    @addOption begin\n        \"Mesh.CharacteristicLengthMax\", 500.0\n        \"Mesh.CharacteristicLengthMin\", 500.0\n    end\n    gmsh.model.geo.synchronize()\n    gmsh.model.mesh.generate(2)\n    gmsh.write(fname)\nend\nm = read_gmsh_mesh(Val(:TDTri3), fname; phytag=99)\n\n## system parameters\nλ, μ = 3e10, 3e10\nft = STRIKING()\nf0 = 0.6\nv0 = 1e-6\nvpl = 3.17e-9\ncs = 3044.0\nη = μ / 2cs\na = ones(size(m.tag)) * 0.015\nb = ones(size(m.tag)) * 0.0115\nL = ones(size(m.tag)) * 12e-3\nleft_patch = @. -25e3 ≤ m.x ≤ -5e3\nright_patch = @. 5e3 ≤ m.x ≤ 25e3\nvert_patch = @. -6e3 ≤ m.z ≤ -1e3\nb[(left_patch .| right_patch) .& vert_patch] .= 0.0185\nσmax = 5e7\nσ = map(z -> min(σmax, 1.5e6 + 18e3 * -z), m.z)\n\n## visual check\ncache = gmsh_vtk_output_cache(fname, 2, 99)\nvtk_output(\"tdp\", [a - b, σ], [\"a-b\", \"σ\"], cache)\n\n## compute Green's function\ngf = stress_greens_func(m, λ, μ, ft)\nh5write(\"tdgf.h5\", \"gf\", gf)\ngf = h5read(\"tdgf.h5\", \"gf\")\n\n## assemble prob\np = RateStateQuasiDynamicProperty(a, b, L, σ, η, vpl, f0, v0)\nvinit = ones(size(m.tag)) * vpl\nθinit = L ./ vinit ./ 1.1\nuinit = ArrayPartition(vinit, θinit)\nprob = assemble(gf, p, uinit, (0., 18. * 365 * 86400))\nsol = wsolve(prob, VCABM3(), \"temp.h5\", 500, 𝐕𝚯, [\"v\", \"θ\"], \"t\"; rtol=1e-6, atol=1e-6)\n\n## results\nt = h5read(\"temp.h5\", \"t\")\nv = h5read(\"temp.h5\", \"v\")\nmaxv = dropdims(mapslices(maximum, v, dims=[1]); dims=1)\nplot(t / 365 / 86400, log10.(maxv), markershape=:circle, markersize=0.2)","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"","category":"page"},{"location":"examples/generated/otfsync/#","page":"Example 2D","title":"Example 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"acknowledge/#Acknowledge-1","page":"Acknowledge","title":"Acknowledge","text":"","category":"section"},{"location":"acknowledge/#","page":"Acknowledge","title":"Acknowledge","text":"The simulation of episodic seismic and slow slip events using boundary-element-method for pure elastic fault is largely benefit from Yajing Liu original Fortran code.","category":"page"},{"location":"acknowledge/#","page":"Acknowledge","title":"Acknowledge","text":"This package isn't possible without a collaborating Julia community.","category":"page"},{"location":"acknowledge/#LICENSE-1","page":"Acknowledge","title":"LICENSE","text":"","category":"section"},{"location":"acknowledge/#","page":"Acknowledge","title":"Acknowledge","text":"This package is licensed under GPLv3.","category":"page"},{"location":"acknowledge/#","page":"Acknowledge","title":"Acknowledge","text":"This package includes derivative codes from the following project which has their own license:","category":"page"},{"location":"acknowledge/#","page":"Acknowledge","title":"Acknowledge","text":"dc3d.f (rectangular dislocation with limited rotation freedom)\nTriangular Dislocation\nHexahedron Inelastic Deformation\nTetrahedron Inelastic Deformation","category":"page"},{"location":"#Quaycle.jl-Documentation-1","page":"Home","title":"Quaycle.jl Documentation","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a suite for numerically simulating earthquake sequences in Julia. The purpose of this package is to provide efficient Julia implementations for simulations in the field of earthquake physics.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Features of this package currently:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"✅ Rate-State Friction\n✅ Plastic Deformation\n✅ Boundary Element Method (Quasi-dynamic)\n✅ Viscoelastic Relaxation\n✅ Integration with Gmsh and Paraview","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Features to be implemented:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"❌ Fully elastodynamics\n❌ Finite element method via Fenics","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Get the latest version with Julia's package manager:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.3) pkg> add https://github.com/shipengcheng1230/Quaycle.jl","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To load the package:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Quaycle","category":"page"},{"location":"interface_property/#Simulation-Properties-1","page":"Simulation Property","title":"Simulation Properties","text":"","category":"section"},{"location":"interface_property/#","page":"Simulation Property","title":"Simulation Property","text":"We attribute one struct of all necessary properties for each type of simulation objections.","category":"page"},{"location":"interface_property/#Public-Interface-1","page":"Simulation Property","title":"Public Interface","text":"","category":"section"},{"location":"interface_property/#","page":"Simulation Property","title":"Simulation Property","text":"SingleDofRSFProperty\nRateStateQuasiDynamicProperty\nDislocationCreepProperty\nDiffusionCreepProperty\nPeierlsProperty\nCompositePlasticDeformationProperty\nViscoelasticMaxwellProperty","category":"page"},{"location":"interface_property/#Quaycle.SingleDofRSFProperty","page":"Simulation Property","title":"Quaycle.SingleDofRSFProperty","text":"System property for single degree of freedom under rate-state friction.\n\nFields\n\na: contrib from velocity\nb: contrib from state\nL: critical distance\nk: spring stiffness\nσ: effective normal stress\nη: radiation damping\nvpl: plate rate\nf0 = 0.6: ref. frictional coeff\nv0 = 1e-6: ref. velocity\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.RateStateQuasiDynamicProperty","page":"Simulation Property","title":"Quaycle.RateStateQuasiDynamicProperty","text":"System property for multiple fault patches under rate-state friction.\n\nFields\n\na: contrib from velocity\nb: contrib from state\nL: critical distance\nσ: effective normal stress\nη: radiation damping\nvpl: plate rate\nf0 = 0.6: ref. frictional coeff\nv0 = 1e-6: ref. velocity\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.DislocationCreepProperty","page":"Simulation Property","title":"Quaycle.DislocationCreepProperty","text":"System properties for plastic deformation of dislocation creep.     Please refer (Hirth & Kohlstedt, 2003)     for concrete units of each factor.\n\nFields\n\nA: prefactor\nn: power law stress exponent\nCOH: water content[1]\nr: water fugacity exponent\nα: melting constant\nϕ: melting fraction\nQ: activation energy\nP: pressure\nΩ: activation volume\nT: temperature\n\n[1]: Some references may refer it as water fugacity f_mathrmH_2 O, which is misleading. Since fugacity has the same dimension of chemical potential (Pa) while water content is dimensionless.\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.DiffusionCreepProperty","page":"Simulation Property","title":"Quaycle.DiffusionCreepProperty","text":"System properties for plastic deformation of diffusion creep.     Please refer (Hirth & Kohlstedt, 2003)     for concrete units of each factor.\n\nFields\n\nA: prefactor\nd: grain size\nm: grain size exponent\nCOH: water content[1]\nr: water fugacity exponent\nα: melting constant\nϕ: melting fraction\nQ: activation energy\nP: pressure\nΩ: activation volume\nT: temperature\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.PeierlsProperty","page":"Simulation Property","title":"Quaycle.PeierlsProperty","text":"System properties for plastic deformation of Peierls Mechanisms. Not implemented yet.\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.CompositePlasticDeformationProperty","page":"Simulation Property","title":"Quaycle.CompositePlasticDeformationProperty","text":"Compose all three type of plastic deformation and other strain-related system properties, see     (Kohlstedt & Hansen, 2015).     Each field is the overall equivalent factor not dependent on stress.\n\nFields\n\ndisl: dislocation creep\nn: stress exponent in dislocation creep\ndiff: diffusion creep\npeie: Peierls mechanisms\ndϵref: reference strain rate whose length must equal strain components considered\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#Quaycle.ViscoelasticMaxwellProperty","page":"Simulation Property","title":"Quaycle.ViscoelasticMaxwellProperty","text":"Composite property for viscoelastic rheology of maxwell representation.\n\nFields\n\npe::RateStateQuasiDynamicProperty: elastic rate-and-state system property\npv::CompositePlasticDeformationProperty: composite plastic deformation system property\n\n\n\n\n\n","category":"type"},{"location":"interface_property/#","page":"Simulation Property","title":"Simulation Property","text":"Modules = [Quaycle]\nPages = [\"property.jl\"]\nPrivate = false\nOrder = [:function, :constant, :macro]","category":"page"},{"location":"interface_property/#Quaycle.compose-Union{Tuple{T}, Tuple{RateStateQuasiDynamicProperty{T,U} where U<:(Union{AbstractArray{T,1}, AbstractArray{T,2}} where T),AbstractArray{T,1} where T,Vararg{Any,N} where N}} where T","page":"Simulation Property","title":"Quaycle.compose","text":"compose(pe::RateStateQuasiDynamicProperty{T}, dϵref::AbstractVector, dϵname::AbstractVector, pvs...) where T\n\nCreate maxwell viscoelastic system given both rate-and-state and plastic properties.\n\nArguments\n\npe::RateStateQuasiDynamicProperty{T}: elastic rate-and-state system property\ndϵref: reference strain rate whose length must equal to and order same as strain components considered\npvs...: different type of plastic deformation system properties but no more than three\n\n\n\n\n\n","category":"method"},{"location":"interface_property/#Quaycle.composite_factor-Tuple{DislocationCreepProperty}","page":"Simulation Property","title":"Quaycle.composite_factor","text":"composite_factor(pv::PlasticDeformationProperty)\n\nCompute an equivalent factor for levarage recomputing during ODE solving.\n\nArguments\n\npv::PlasticDeformationProperty: plastic deformation system property\n\n\n\n\n\n","category":"method"},{"location":"interface_friction/#Friction-1","page":"Friction","title":"Friction","text":"","category":"section"},{"location":"interface_friction/#","page":"Friction","title":"Friction","text":"This package adopts what is called rate-and-state friction as one of the essential components for modeling fault dynamics. Currently, we only support single state variable θ.","category":"page"},{"location":"interface_friction/#Public-Interface-1","page":"Friction","title":"Public Interface","text":"","category":"section"},{"location":"interface_friction/#","page":"Friction","title":"Friction","text":"Modules = [Quaycle]\nPages = [\"friction.jl\"]\nPrivate = false\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"interface_friction/#Quaycle.CForm","page":"Friction","title":"Quaycle.CForm","text":"Conventional form, see friction\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.DieterichStateLaw","page":"Friction","title":"Quaycle.DieterichStateLaw","text":"fracmathrmdθmathrmdt = 1 - fracV θL\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.PrzStateLaw","page":"Friction","title":"Quaycle.PrzStateLaw","text":"fracmathrmdθmathrmdt = 1 - left(fracV θ2Lright)^2\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.RForm","page":"Friction","title":"Quaycle.RForm","text":"Regularized form, see friction\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.RuinaStateLaw","page":"Friction","title":"Quaycle.RuinaStateLaw","text":"fracmathrmdθmathrmdt = -fracV θL * logleft(fracV θLright)\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.StateEvolutionLaw","page":"Friction","title":"Quaycle.StateEvolutionLaw","text":"Currently support:\n\nDieterichStateLaw\nRuinaStateLaw\nPrzStateLaw\n\n\n\n\n\n","category":"type"},{"location":"interface_friction/#Quaycle.friction-Union{Tuple{T}, Tuple{CForm,T,T,T,T,T,T,T}} where T","page":"Friction","title":"Quaycle.friction","text":"friction(::CForm, v::T, θ::T, a::T, b::T, L::T, f0::T, v0::T) where T\n\nCalculate friction given by the form of fomula as well as other necessary parameters.\n\nConventional Form:\n\nf(V θ) = f_0 + a lnleft(fracVV_0right) + b lnleft(fracV_0 θLright)\n\nRegularized Form:\n\nf(V θ) = a sinh ^-1left(fracV2V_0 expleft(fracf_0 + b lnleft(V_0 θLright)aright)right)\n\n\n\n\n\n","category":"method"},{"location":"interface_friction/#References-1","page":"Friction","title":"References","text":"","category":"section"},{"location":"interface_friction/#","page":"Friction","title":"Friction","text":"Dieterich, J. (1979). Modeling of rock friction: 1. Experimental results and constitutive equations. Journal of Geophysical Research: Solid Earth, 84(B5), 2161–2168. https://doi.org/10.1029/JB084iB05p02161","category":"page"},{"location":"interface_friction/#","page":"Friction","title":"Friction","text":"Ruina, A. (1983). Slip instability and state variable friction laws. Journal of Geophysical Research: Solid Earth, 88(B12), 10359–10370. https://doi.org/10.1029/JB088iB12p10359","category":"page"},{"location":"interface_friction/#","page":"Friction","title":"Friction","text":"Rubin, A. M., & Ampuero, J.-P. (2005). Earthquake nucleation on (aging) rate and state faults. Journal of Geophysical Research: Solid Earth, 110(B11). https://doi.org/10.1029/2005JB003686","category":"page"}]
}
