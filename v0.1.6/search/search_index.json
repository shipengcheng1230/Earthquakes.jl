{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JuEQ.jl Documentation \u00b6 Overview \u00b6 This is a suite for numerically simulating earthquake sequences in Julia . The purpose of this package is to provide efficient Julia implementations for simulations in the field of earthquake physics. Features of this package currently: Rate-State Friction Law Boundary Element Method (Quasi-dynamic) Features to be implemented: Viscoelastic relaxation Fully elastodynamics Finite element method Installation \u00b6 Get the latest version with Julia's package manager: 1 ] add https :// github . com / shipengcheng1230 / JuEQ . jl To load the package: 1 using JuEQ","title":"Home"},{"location":"#jueqjl-documentation","text":"","title":"JuEQ.jl Documentation"},{"location":"#overview","text":"This is a suite for numerically simulating earthquake sequences in Julia . The purpose of this package is to provide efficient Julia implementations for simulations in the field of earthquake physics. Features of this package currently: Rate-State Friction Law Boundary Element Method (Quasi-dynamic) Features to be implemented: Viscoelastic relaxation Fully elastodynamics Finite element method","title":"Overview"},{"location":"#installation","text":"Get the latest version with Julia's package manager: 1 ] add https :// github . com / shipengcheng1230 / JuEQ . jl To load the package: 1 using JuEQ","title":"Installation"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2018 Shi Pengcheng Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"private_interface/","text":"Private Interface \u00b6 Index \u00b6 JuEQ.HomogeneousElasticProperties JuEQ.ODEStateVariable JuEQ.applied_unit_dislocation JuEQ.shear_traction JuEQ.stiffness_periodic_boundary_condition! Interfaces \u00b6 # JuEQ.HomogeneousElasticProperties \u2014 Type . Okada's dc3d only applies on isotropic materials, therefore, elastic modulus are constrained to be scalars. source # JuEQ.ODEStateVariable \u2014 Type . Intermediate variable in solving ODEs aimed to avoid allocation overheads. # JuEQ.applied_unit_dislocation \u2014 Method . For noraml fault, it should of course be [0., -1., 0.]. However, in term of force balance, it is quivalent to thrust fault if dip angle are constrained within [0, \u03c0/2] in fact. The unit of unit dislocation below is the same of v * t at set by user so to avoid normalization step. # JuEQ.shear_traction \u2014 Method . 1 shear_traction(::Type{<:PlaneFault}, u, \u03bb, \u03bc, dip) Calculate the shear traction on the fault plane w.r.t. fault types. Arguments u::AbstractArray{<:Number, 1} : the output from dc3d_okada \u03bb::Number : Lam\u00e9's first parameter \u03bc::Number : shear modulus dip::Number : plane dip angle Reference A good reference is at Displacement & Strain & Stress . # JuEQ.stiffness_periodic_boundary_condition! \u2014 Method . Periodic boundary condition for 2D faults. Arguments u::AbstractVector : In-place output which is a 12-elements vector (exactly the output of dc3d_okada ). No assertion here imposed. same as dc3d_okada , see dc3d for details. nrept::Integer : (half) number of repetition, as denoted by -npret: nrept lrept::Number : length of repetition interval, see Note below Note The buffer block length is ( buffer_ratio - 1) multipled by along-strike length.","title":"Private"},{"location":"private_interface/#private-interface","text":"","title":"Private Interface"},{"location":"private_interface/#index","text":"JuEQ.HomogeneousElasticProperties JuEQ.ODEStateVariable JuEQ.applied_unit_dislocation JuEQ.shear_traction JuEQ.stiffness_periodic_boundary_condition!","title":"Index"},{"location":"private_interface/#interfaces","text":"# JuEQ.HomogeneousElasticProperties \u2014 Type . Okada's dc3d only applies on isotropic materials, therefore, elastic modulus are constrained to be scalars. source # JuEQ.ODEStateVariable \u2014 Type . Intermediate variable in solving ODEs aimed to avoid allocation overheads. # JuEQ.applied_unit_dislocation \u2014 Method . For noraml fault, it should of course be [0., -1., 0.]. However, in term of force balance, it is quivalent to thrust fault if dip angle are constrained within [0, \u03c0/2] in fact. The unit of unit dislocation below is the same of v * t at set by user so to avoid normalization step. # JuEQ.shear_traction \u2014 Method . 1 shear_traction(::Type{<:PlaneFault}, u, \u03bb, \u03bc, dip) Calculate the shear traction on the fault plane w.r.t. fault types. Arguments u::AbstractArray{<:Number, 1} : the output from dc3d_okada \u03bb::Number : Lam\u00e9's first parameter \u03bc::Number : shear modulus dip::Number : plane dip angle Reference A good reference is at Displacement & Strain & Stress . # JuEQ.stiffness_periodic_boundary_condition! \u2014 Method . Periodic boundary condition for 2D faults. Arguments u::AbstractVector : In-place output which is a 12-elements vector (exactly the output of dc3d_okada ). No assertion here imposed. same as dc3d_okada , see dc3d for details. nrept::Integer : (half) number of repetition, as denoted by -npret: nrept lrept::Number : length of repetition interval, see Note below Note The buffer block length is ( buffer_ratio - 1) multipled by along-strike length.","title":"Interfaces"},{"location":"public_interface/","text":"Public Interface \u00b6 Index \u00b6 JuEQ.DieterichStateLaw JuEQ.PrzStateLaw JuEQ.RuinaStateLaw JuEQ.DECallbackSaveToFile JuEQ.EarthquakeCycleProblem JuEQ.dc3d_okada JuEQ.discretize JuEQ.discretize JuEQ.fault JuEQ.friction JuEQ.max_velocity JuEQ.moment_magnitude JuEQ.properties JuEQ.stiffness_tensor Interfaces \u00b6 # JuEQ.DieterichStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - \\frac{V \u03b8}{L}$ # JuEQ.PrzStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - (\\frac{V \u03b8}{2L})^2$ # JuEQ.RuinaStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = -\\frac{V \u03b8}{L} * \\log{\\frac{V \u03b8}{L}}$ # JuEQ.DECallbackSaveToFile \u2014 Method . 1 DECallbackSaveToFile(iot::IOStream, iou::IOStream) Construct a functional callback to write ODESolution ( t & u ) into file. The reason to separate t and u is for more easily reshape u w.r.t grids specification. It right now falls on users' memory on what the type of solution is for accurately retrieving results. Arguments iot::IOStream : stream pointing to solution of time iou::IOStream : stream pointing to solution of domain Note It is strongly not recommended to use \"skipping\" scheme (by defining thrd and dts(a) for each case) when solution is too oscillated. # JuEQ.EarthquakeCycleProblem \u2014 Method . 1 EarthquakeCycleProblem(p::PlaneMaterialProperties, u0, tspan; se=DieterichStateLaw(), fform=CForm()) Return an ODEProblem that encapsulate all the parameters and functions required for simulation. For the entailing usage, please refer DifferentialEquations.jl Arguments gd::BoundaryElementGrid : grids for fault domain. p::PlaneMaterialProperties : material profile. u0::AbstractArray : initial condition, should be organized such that the first of last dim is velocity while the 2nd of last dim is state. tspan::NTuple : time interval to be simulated. se::StateEvolutionLaw : state evolution law to be applied. fform::FrictionLawForm : forms of frictional law to be applied. # JuEQ.dc3d_okada \u2014 Method . Calculate displacements and gradient of displacements due to a dislocation in an elastic isotropic halfspace. See dc3d for details. test/test_okada.dat is obtained using DC3dfortran An example wrapper for DC3D in julia as below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 function dc3d_fortran ( x :: T , y :: T , z :: T , \u03b1 :: T , dep :: T , dip :: T , al1 :: T , al2 :: T , aw1 :: T , aw2 :: T , disl1 :: T , disl2 :: T , disl3 :: T ) where { T <: AbstractFloat } # initial return values # `RefValue{T}` may be also viable other than `Array{T, 1}` ux = Array { Float64 }( 1 ) uy = Array { Float64 }( 1 ) uz = Array { Float64 }( 1 ) uxx = Array { Float64 }( 1 ) uyx = Array { Float64 }( 1 ) uzx = Array { Float64 }( 1 ) uxy = Array { Float64 }( 1 ) uyy = Array { Float64 }( 1 ) uzy = Array { Float64 }( 1 ) uxz = Array { Float64 }( 1 ) uyz = Array { Float64 }( 1 ) uzz = Array { Float64 }( 1 ) iret = Array { Int64 }( 1 ) # call okada's code which is renamed as \"__dc3d__\" (see binding rename shown below) # input args tuple must be syntactically written instead of a variable assigned # macros could be used to simplify this in the future ccall (( : __dc3d__ , \"dc3d.so\" ), Void , ( Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ref { Int64 }, ), \u03b1 , x , y , z , dep , dip , al1 , al2 , aw1 , aw2 , disl1 , disl2 , disl3 , ux , uy , uz , uxx , uyx , uzx , uxy , uyy , uzy , uxz , uyz , uzz , iret , ) # results valid iff iret[1] == 0 return ( iret [ 1 ], ux [ 1 ], uy [ 1 ], uz [ 1 ], uxx [ 1 ], uyx [ 1 ], uzx [ 1 ], uxy [ 1 ], uyy [ 1 ], uzy [ 1 ], uxz [ 1 ], uyz [ 1 ], uzz [ 1 ] ) end The corresponding fortran module is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 MODULE okada USE , INTRINSIC :: iso_c_binding IMPLICIT NONE CONTAINS SUBROUTINE dc3d_wrapper (& & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz , & & iret ) BIND ( C , NAME = '__dc3d__' ) REAL * 8 :: & & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz INTEGER * 8 :: iret CALL dc3d (& & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz , & & iret ) END SUBROUTINE dc3d_wrapper END MODULE okada A sample of makefile is as below: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Build Okada's code for calculating deformation due to a fault model # CC = gfortran CFLAGS = -fPIC -w -O3 LDFLAGS = -shared SRCS = dc3d.f okada.f90 OBJS = $( SRCS:.c = .o ) TARGET = dc3d.so $(TARGET) : $( OBJS ) $( CC ) $( CFLAGS ) $( LDFLAGS ) -o $( TARGET ) $( OBJS ) # JuEQ.discretize \u2014 Method . 1 discretize(fa::PlaneFaultDomain{ftype, 1}, \u0394\u03be::T; ax_ratio=12.5) Generate the grid for given 1D fault domain. The grids will be forced to start at (x=0, y=0, z=0). Arguments \u0394\u03be : grid space along-downdip ax_ratio::Number : ration of along-strike length agsinst along-downdip length for mimicing an extended 2d (x & \u03be) fault represented by 1d (\u03be) domain. Default ax_ratio=12.5 is more than enough for producing consistent results. # JuEQ.discretize \u2014 Method . 1 discretize(fa::PlaneFaultDomain{ftype, 2}, \u0394x, \u0394\u03be; buffer=:auto) where {ftype <: PlaneFault} Generate the grid for given 2D fault domain. The grids will be forced to start at (z=0) and spread symmetrically along x-axis w.r.t y-z plane. By such setting, we would be able to utilize the symmetry properties of stiffness tensor for performance speed up. Arguments \u0394x, \u0394\u03be : grid space along-strike and along-downdip respectively `buffer_ratio::Number: ration of buffer size against along-strike length for introducing zero-dislocation area at along-strike edges of defined fault domain. # JuEQ.fault \u2014 Method . 1 fault(ftype::Type{<:PlaneFault}, dip, span) Generate a fault given the fault type, dip angle and its spatial span. Arguments ftype::Type{<:PlaneFault} : type of plane fault dip : dip angle in degree span : spatial span of fault size # JuEQ.friction \u2014 Method . 1 friction(::FrictionLawForm, v::T, \u03b8::T, L::T, a::T, b::T, f0::T, v0::T) where {T<:Number} Calculate friction given by the form of fomula as well as other necessary parameters. Conventional Form: f(V, \u03b8) = f_0 + a \\ln{\\frac{V}{V_0}} + b \\ln{\\left(\\frac{V_0 \u03b8}{L}\\right)} Regularized Form: f(V, \u03b8) = a \\sinh ^{-1}{\\left[\\frac{V}{2V_0} \\exp{\\frac{f_0 + b \\ln{\\left(V_0 \u03b8/L\\right)}}{a}}\\right]} # JuEQ.max_velocity \u2014 Method . 1 max_velocity(t::AbstractVector, u::AbstractArray, getu::Function) Return max velocity across the fault at each time step. A number of convenient interfaces for common output are implemented. Arguments t::AbstractVector : vector of time steps u::AbstractArray : array of solution getu::Function : method for retrieving velocity section at each time step # JuEQ.moment_magnitude \u2014 Method . Calculate moment magnitude. # JuEQ.properties \u2014 Method . 1 properties(fa::PlaneFaultDomain, gd::BoundaryElementGrid{dim}; _kwargs...) where {dim} Establishing a material-properties-profile given by the fault domain and grids. User must provide the necessary parameters in according to the grid size specified or just a scalar for broadcasting. Arguments that are required: a : contrib from velocity. b : contrib from state. L : critical distance. \u03c3 : effective normal stress. \u03b7 : radiation damping. It is recommended to set as $\u03bc / 2\\mathrm{Vs}$ where $\u03bc$ is shear modulus and $\\mathrm{Vs}$ shear wave velocity. vpl : plate rate. f0 : ref. frictional coeff. v0 : ref. velocity. Arguments that need options k : stiffness tensor. (1) Providing shear modulus denoted as \u03bc and Lam\u00e9's first parameter denoted as \u03bb (same as \u03bc if missing), then calculate it based on grid and fault domain, choosing parallel scheme if nprocs() != 1 . (2) an AbstractArray represent the pre-calculated stiffness tensor. No verification will be performed here. # JuEQ.stiffness_tensor \u2014 Method . 1 stiffness_tensor(fa::PlaneFaultDomain, gd::BoundaryElementGrid, ep::HomogeneousElasticProperties) Calculate the reduced stiffness tensor. For 2D fault, the final result will be dimensionally reduced to a 3D array due to the translational & reflective & perodic symmetry, such that the tensor contraction will be equivalent to convolution, hence we could use FFT for better performace. Note Faults are originated from surface and extends downwards, thus dep = 0","title":"Public"},{"location":"public_interface/#public-interface","text":"","title":"Public Interface"},{"location":"public_interface/#index","text":"JuEQ.DieterichStateLaw JuEQ.PrzStateLaw JuEQ.RuinaStateLaw JuEQ.DECallbackSaveToFile JuEQ.EarthquakeCycleProblem JuEQ.dc3d_okada JuEQ.discretize JuEQ.discretize JuEQ.fault JuEQ.friction JuEQ.max_velocity JuEQ.moment_magnitude JuEQ.properties JuEQ.stiffness_tensor","title":"Index"},{"location":"public_interface/#interfaces","text":"# JuEQ.DieterichStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - \\frac{V \u03b8}{L}$ # JuEQ.PrzStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - (\\frac{V \u03b8}{2L})^2$ # JuEQ.RuinaStateLaw \u2014 Type . $\\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = -\\frac{V \u03b8}{L} * \\log{\\frac{V \u03b8}{L}}$ # JuEQ.DECallbackSaveToFile \u2014 Method . 1 DECallbackSaveToFile(iot::IOStream, iou::IOStream) Construct a functional callback to write ODESolution ( t & u ) into file. The reason to separate t and u is for more easily reshape u w.r.t grids specification. It right now falls on users' memory on what the type of solution is for accurately retrieving results. Arguments iot::IOStream : stream pointing to solution of time iou::IOStream : stream pointing to solution of domain Note It is strongly not recommended to use \"skipping\" scheme (by defining thrd and dts(a) for each case) when solution is too oscillated. # JuEQ.EarthquakeCycleProblem \u2014 Method . 1 EarthquakeCycleProblem(p::PlaneMaterialProperties, u0, tspan; se=DieterichStateLaw(), fform=CForm()) Return an ODEProblem that encapsulate all the parameters and functions required for simulation. For the entailing usage, please refer DifferentialEquations.jl Arguments gd::BoundaryElementGrid : grids for fault domain. p::PlaneMaterialProperties : material profile. u0::AbstractArray : initial condition, should be organized such that the first of last dim is velocity while the 2nd of last dim is state. tspan::NTuple : time interval to be simulated. se::StateEvolutionLaw : state evolution law to be applied. fform::FrictionLawForm : forms of frictional law to be applied. # JuEQ.dc3d_okada \u2014 Method . Calculate displacements and gradient of displacements due to a dislocation in an elastic isotropic halfspace. See dc3d for details. test/test_okada.dat is obtained using DC3dfortran An example wrapper for DC3D in julia as below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 function dc3d_fortran ( x :: T , y :: T , z :: T , \u03b1 :: T , dep :: T , dip :: T , al1 :: T , al2 :: T , aw1 :: T , aw2 :: T , disl1 :: T , disl2 :: T , disl3 :: T ) where { T <: AbstractFloat } # initial return values # `RefValue{T}` may be also viable other than `Array{T, 1}` ux = Array { Float64 }( 1 ) uy = Array { Float64 }( 1 ) uz = Array { Float64 }( 1 ) uxx = Array { Float64 }( 1 ) uyx = Array { Float64 }( 1 ) uzx = Array { Float64 }( 1 ) uxy = Array { Float64 }( 1 ) uyy = Array { Float64 }( 1 ) uzy = Array { Float64 }( 1 ) uxz = Array { Float64 }( 1 ) uyz = Array { Float64 }( 1 ) uzz = Array { Float64 }( 1 ) iret = Array { Int64 }( 1 ) # call okada's code which is renamed as \"__dc3d__\" (see binding rename shown below) # input args tuple must be syntactically written instead of a variable assigned # macros could be used to simplify this in the future ccall (( : __dc3d__ , \"dc3d.so\" ), Void , ( Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ref { Float64 }, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ptr { Array { Float64 , 1 }}, Ref { Int64 }, ), \u03b1 , x , y , z , dep , dip , al1 , al2 , aw1 , aw2 , disl1 , disl2 , disl3 , ux , uy , uz , uxx , uyx , uzx , uxy , uyy , uzy , uxz , uyz , uzz , iret , ) # results valid iff iret[1] == 0 return ( iret [ 1 ], ux [ 1 ], uy [ 1 ], uz [ 1 ], uxx [ 1 ], uyx [ 1 ], uzx [ 1 ], uxy [ 1 ], uyy [ 1 ], uzy [ 1 ], uxz [ 1 ], uyz [ 1 ], uzz [ 1 ] ) end The corresponding fortran module is: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 MODULE okada USE , INTRINSIC :: iso_c_binding IMPLICIT NONE CONTAINS SUBROUTINE dc3d_wrapper (& & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz , & & iret ) BIND ( C , NAME = '__dc3d__' ) REAL * 8 :: & & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz INTEGER * 8 :: iret CALL dc3d (& & alpha , & & x , y , z , & & depth , dip , & & al1 , al2 , & & aw1 , aw2 , & & disl1 , disl2 , disl3 , & & ux , uy , uz , & & uxx , uyx , uzx , & & uxy , uyy , uzy , & & uxz , uyz , uzz , & & iret ) END SUBROUTINE dc3d_wrapper END MODULE okada A sample of makefile is as below: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Build Okada's code for calculating deformation due to a fault model # CC = gfortran CFLAGS = -fPIC -w -O3 LDFLAGS = -shared SRCS = dc3d.f okada.f90 OBJS = $( SRCS:.c = .o ) TARGET = dc3d.so $(TARGET) : $( OBJS ) $( CC ) $( CFLAGS ) $( LDFLAGS ) -o $( TARGET ) $( OBJS ) # JuEQ.discretize \u2014 Method . 1 discretize(fa::PlaneFaultDomain{ftype, 1}, \u0394\u03be::T; ax_ratio=12.5) Generate the grid for given 1D fault domain. The grids will be forced to start at (x=0, y=0, z=0). Arguments \u0394\u03be : grid space along-downdip ax_ratio::Number : ration of along-strike length agsinst along-downdip length for mimicing an extended 2d (x & \u03be) fault represented by 1d (\u03be) domain. Default ax_ratio=12.5 is more than enough for producing consistent results. # JuEQ.discretize \u2014 Method . 1 discretize(fa::PlaneFaultDomain{ftype, 2}, \u0394x, \u0394\u03be; buffer=:auto) where {ftype <: PlaneFault} Generate the grid for given 2D fault domain. The grids will be forced to start at (z=0) and spread symmetrically along x-axis w.r.t y-z plane. By such setting, we would be able to utilize the symmetry properties of stiffness tensor for performance speed up. Arguments \u0394x, \u0394\u03be : grid space along-strike and along-downdip respectively `buffer_ratio::Number: ration of buffer size against along-strike length for introducing zero-dislocation area at along-strike edges of defined fault domain. # JuEQ.fault \u2014 Method . 1 fault(ftype::Type{<:PlaneFault}, dip, span) Generate a fault given the fault type, dip angle and its spatial span. Arguments ftype::Type{<:PlaneFault} : type of plane fault dip : dip angle in degree span : spatial span of fault size # JuEQ.friction \u2014 Method . 1 friction(::FrictionLawForm, v::T, \u03b8::T, L::T, a::T, b::T, f0::T, v0::T) where {T<:Number} Calculate friction given by the form of fomula as well as other necessary parameters. Conventional Form: f(V, \u03b8) = f_0 + a \\ln{\\frac{V}{V_0}} + b \\ln{\\left(\\frac{V_0 \u03b8}{L}\\right)} Regularized Form: f(V, \u03b8) = a \\sinh ^{-1}{\\left[\\frac{V}{2V_0} \\exp{\\frac{f_0 + b \\ln{\\left(V_0 \u03b8/L\\right)}}{a}}\\right]} # JuEQ.max_velocity \u2014 Method . 1 max_velocity(t::AbstractVector, u::AbstractArray, getu::Function) Return max velocity across the fault at each time step. A number of convenient interfaces for common output are implemented. Arguments t::AbstractVector : vector of time steps u::AbstractArray : array of solution getu::Function : method for retrieving velocity section at each time step # JuEQ.moment_magnitude \u2014 Method . Calculate moment magnitude. # JuEQ.properties \u2014 Method . 1 properties(fa::PlaneFaultDomain, gd::BoundaryElementGrid{dim}; _kwargs...) where {dim} Establishing a material-properties-profile given by the fault domain and grids. User must provide the necessary parameters in according to the grid size specified or just a scalar for broadcasting. Arguments that are required: a : contrib from velocity. b : contrib from state. L : critical distance. \u03c3 : effective normal stress. \u03b7 : radiation damping. It is recommended to set as $\u03bc / 2\\mathrm{Vs}$ where $\u03bc$ is shear modulus and $\\mathrm{Vs}$ shear wave velocity. vpl : plate rate. f0 : ref. frictional coeff. v0 : ref. velocity. Arguments that need options k : stiffness tensor. (1) Providing shear modulus denoted as \u03bc and Lam\u00e9's first parameter denoted as \u03bb (same as \u03bc if missing), then calculate it based on grid and fault domain, choosing parallel scheme if nprocs() != 1 . (2) an AbstractArray represent the pre-calculated stiffness tensor. No verification will be performed here. # JuEQ.stiffness_tensor \u2014 Method . 1 stiffness_tensor(fa::PlaneFaultDomain, gd::BoundaryElementGrid, ep::HomogeneousElasticProperties) Calculate the reduced stiffness tensor. For 2D fault, the final result will be dimensionally reduced to a 3D array due to the translational & reflective & perodic symmetry, such that the tensor contraction will be equivalent to convolution, hence we could use FFT for better performace. Note Faults are originated from surface and extends downwards, thus dep = 0","title":"Interfaces"},{"location":"quasi_dynamic_intro/","text":"Quasi-dynamic Simulation using BEM \u00b6 Basic Theory \u00b6 The governing equation is that at every time step, shear stress across the fault plane equals to frictional force plus a radiation damping term for approximating wave propagation effect: \u03c4 = \u03c3f + \u03b7V Here $\u03bc$ is shear stress across the fault plain. Using Okada's dislocation theory , it can be shown as: \u03c4 = \\mathrm{K} \u2297 \u03b4 where $\\mathrm{K}$ is the so-called stiffness tensor, depicting relationship between displacements at one position regarding to dislocations somewhere else. $\u03b4$ is the dislocation, i.e. displacement at everywhere on the fault. $\u2297$ denotes tensor contraction. Back to $f$, we use rate-and-state frictional law to calculate its value, specifically as below: f(V, \u03b8) = f_0 + a \\ln{\\frac{V}{V_0}} + b \\ln{\\left(\\frac{V_0 \u03b8}{L}\\right)} where $f_0$ and $V_0$ are reference friction coefficient and velocity, $V$ and $\u03b8$ are velocity and state variable based on which frictional force is. $a$ and $b$ are two frictional parameters denoting contributions each of which comes from velocity and state variable respectively. $L$ is critical distance after which frictional force return to new steady state. Sometimes people use regularized form to avoid infinity when $V \u2248 0$, namely: f(V, \u03b8) = a \\sinh ^{-1}{\\left[\\frac{V}{2V_0} \\exp{\\frac{f_0 + b \\ln{\\left(V_0 \u03b8/L\\right)}}{a}}\\right]} There are many state evolution law that describes how state variable $\u03b8$ changes with time, one of which that most widely used is Dieterich law: \\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - \\frac{V \u03b8}{L} Further, $\u03b7$ is a damping coefficient whose value is often chosen as $\u03bc / 2\\mathrm{Vs}$ where $\u03bc$ is shear modulus and $\\mathrm{Vs}$ shear wave velocity and $\u03c3$ is the effective normal stress. To simulate how fault evolves with time, we then take the derivative of the governing equation: \\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} = \\frac{\\mathrm{d} f(V, \u03b8)}{\\mathrm{d} t} + \u03b7 \\frac{\\mathrm{d} V}{\\mathrm{d} t} = \\frac{\\mathrm{d} f}{\\mathrm{d} V} \\frac{\\mathrm{d} V}{\\mathrm{d} t} + \\frac{\\mathrm{d} f}{\\mathrm{d} \u03b8} \\frac{\\mathrm{d} \u03b8}{\\mathrm{d} t} + \u03b7 \\frac{\\mathrm{d} V}{\\mathrm{d} t} Thus we arrive at: \\frac{\\mathrm{d} V}{\\mathrm{d} t} = \\frac{\\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} - \\frac{\\mathrm{d} f}{\\mathrm{d} \u03b8} \\frac{\\mathrm{d} \u03b8}{\\mathrm{d} t}}{\\frac{\\mathrm{d} f}{\\mathrm{d} V} + \u03b7} where $\\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} = \\mathrm{K} \u2297 (\\mathrm{V_{pl}} - V)$ where $\\mathrm{V_{pl}}$ is the plate rate. Note The direction of relative velocity, namely $\\mathrm{V_{pl} - V}$, must be in accordance to the direction of $\\mathrm{K}$ which, here, we use the same meaning as Rice, J. (1993). Hence, with both derivatives of velocity $V$ and state variable $\u03b8$, we are able to discover how fault evolves with various parameters settings.","title":"Basic Theory"},{"location":"quasi_dynamic_intro/#quasi-dynamic-simulation-using-bem","text":"","title":"Quasi-dynamic Simulation using BEM"},{"location":"quasi_dynamic_intro/#basic-theory","text":"The governing equation is that at every time step, shear stress across the fault plane equals to frictional force plus a radiation damping term for approximating wave propagation effect: \u03c4 = \u03c3f + \u03b7V Here $\u03bc$ is shear stress across the fault plain. Using Okada's dislocation theory , it can be shown as: \u03c4 = \\mathrm{K} \u2297 \u03b4 where $\\mathrm{K}$ is the so-called stiffness tensor, depicting relationship between displacements at one position regarding to dislocations somewhere else. $\u03b4$ is the dislocation, i.e. displacement at everywhere on the fault. $\u2297$ denotes tensor contraction. Back to $f$, we use rate-and-state frictional law to calculate its value, specifically as below: f(V, \u03b8) = f_0 + a \\ln{\\frac{V}{V_0}} + b \\ln{\\left(\\frac{V_0 \u03b8}{L}\\right)} where $f_0$ and $V_0$ are reference friction coefficient and velocity, $V$ and $\u03b8$ are velocity and state variable based on which frictional force is. $a$ and $b$ are two frictional parameters denoting contributions each of which comes from velocity and state variable respectively. $L$ is critical distance after which frictional force return to new steady state. Sometimes people use regularized form to avoid infinity when $V \u2248 0$, namely: f(V, \u03b8) = a \\sinh ^{-1}{\\left[\\frac{V}{2V_0} \\exp{\\frac{f_0 + b \\ln{\\left(V_0 \u03b8/L\\right)}}{a}}\\right]} There are many state evolution law that describes how state variable $\u03b8$ changes with time, one of which that most widely used is Dieterich law: \\frac{\\mathrm{d}\u03b8}{\\mathrm{d}t} = 1 - \\frac{V \u03b8}{L} Further, $\u03b7$ is a damping coefficient whose value is often chosen as $\u03bc / 2\\mathrm{Vs}$ where $\u03bc$ is shear modulus and $\\mathrm{Vs}$ shear wave velocity and $\u03c3$ is the effective normal stress. To simulate how fault evolves with time, we then take the derivative of the governing equation: \\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} = \\frac{\\mathrm{d} f(V, \u03b8)}{\\mathrm{d} t} + \u03b7 \\frac{\\mathrm{d} V}{\\mathrm{d} t} = \\frac{\\mathrm{d} f}{\\mathrm{d} V} \\frac{\\mathrm{d} V}{\\mathrm{d} t} + \\frac{\\mathrm{d} f}{\\mathrm{d} \u03b8} \\frac{\\mathrm{d} \u03b8}{\\mathrm{d} t} + \u03b7 \\frac{\\mathrm{d} V}{\\mathrm{d} t} Thus we arrive at: \\frac{\\mathrm{d} V}{\\mathrm{d} t} = \\frac{\\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} - \\frac{\\mathrm{d} f}{\\mathrm{d} \u03b8} \\frac{\\mathrm{d} \u03b8}{\\mathrm{d} t}}{\\frac{\\mathrm{d} f}{\\mathrm{d} V} + \u03b7} where $\\frac{\\mathrm{d} \u03c4}{\\mathrm{d} t} = \\mathrm{K} \u2297 (\\mathrm{V_{pl}} - V)$ where $\\mathrm{V_{pl}}$ is the plate rate. Note The direction of relative velocity, namely $\\mathrm{V_{pl} - V}$, must be in accordance to the direction of $\\mathrm{K}$ which, here, we use the same meaning as Rice, J. (1993). Hence, with both derivatives of velocity $V$ and state variable $\u03b8$, we are able to discover how fault evolves with various parameters settings.","title":"Basic Theory"},{"location":"references/","text":"Acknowledgements & References \u00b6 Acknowledgements \u00b6 The simulation of episodic seismic and slow slip events using boundary-element-method is largely benifit from Yajing Liu original Fortran code. References \u00b6 Please consider to cite the following papers if you find this package useful. Boundary element method (quasi-dynamic) \u00b6 Rice, J. (1993). Spatio-temporal complexity of slip on a fault. Journal of Geophysical Research: Solid Earth, 98(B6), 9885\u20139907. https://doi.org/10.1029/93JB00191 Liu, Y., & Rice, J. R. (2005). Aseismic slip transients emerge spontaneously in three-dimensional rate and state modeling of subduction earthquake sequences. Journal of Geophysical Research: Solid Earth, 110(B8). https://doi.org/10.1029/2004JB003424","title":"References"},{"location":"references/#acknowledgements-references","text":"","title":"Acknowledgements &amp; References"},{"location":"references/#acknowledgements","text":"The simulation of episodic seismic and slow slip events using boundary-element-method is largely benifit from Yajing Liu original Fortran code.","title":"Acknowledgements"},{"location":"references/#references","text":"Please consider to cite the following papers if you find this package useful.","title":"References"},{"location":"references/#boundary-element-method-quasi-dynamic","text":"Rice, J. (1993). Spatio-temporal complexity of slip on a fault. Journal of Geophysical Research: Solid Earth, 98(B6), 9885\u20139907. https://doi.org/10.1029/93JB00191 Liu, Y., & Rice, J. R. (2005). Aseismic slip transients emerge spontaneously in three-dimensional rate and state modeling of subduction earthquake sequences. Journal of Geophysical Research: Solid Earth, 110(B8). https://doi.org/10.1029/2004JB003424","title":"Boundary element method (quasi-dynamic)"},{"location":"examples/generated/bp1/","text":"Note This example is from Benchmark Problem 1 (hence referred as BP1). Define Parameters \u00b6 First, we load the package 1 2 using JuEQ using Plots Instead of using SI unit, we refactor ours into the follow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ms2mmyr = 365 * 86400 * 1e3 # convert velocity from m/s to mm/yr \u03c1 = 2670.0 # density [kg/m\u00b3] vs = 3464.0 # shear wave velocity [m/s] \u03c3 = 500.0 # effective normal stress [bar] a0 = 0.010 # frictional paramter `a` in vw zone amax = 0.025 # frictional paramter `a` in vs zone b0 = 0.015 # frictional paramter `b` L = 8.0 # critical distance [mm] vpl = 1e-9 * ms2mmyr # plate rate [mm/yr] vinit = 1e-9 * ms2mmyr # initial velocity [mm/yr] v0 = 1e-6 * ms2mmyr # reference velocity [mm/yr] f0 = 0.6 # reference frictional coefficient H = 15.0 # vw zone [km] h = 3.0 # vw-vs changing zone [km] Wf = 40.0 # fault depth [km] \u0394z = 100.0e-3 # grid size interval [km] tf = 400.0 ; # simulation time [yr] 1 400.0 Warning Make sure your units are consistent across the whole variable space. Pontenial imporvement may incoporate Unitful.jl package. Then we arrive at some parameters that are implicit by above: 1 2 3 4 \u03bc = vs ^ 2 * \u03c1 / 1e5 / 1e6 # shear modulus [bar\u00b7km/mm] \u03bb = \u03bc # poisson material \u03b7 = \u03bc / 2 ( vs * 1e-3 * 365 * 86400 ) ngrid = round ( Int , Wf / \u0394z ); # number of grids 1 400 Now, we start to construct our model using parameters above. First, we create a 'fault' by specifying fault type and depth: Tip Here, we do not need to provide dip for strike-slip fault as it automatically choose 90 . See fault . Construct Model \u00b6 1 fa = fault ( StrikeSlipFault , Wf ); 1 PlaneFaultDomain{StrikeSlipFault,1,Float64}(90.0, (40.0,)) Next, we generate the grid regarding the fault we just created by giving number of grids: Note This package use \u03be for denoting downdip coordinate and x for along-strike one. See discretize . 1 gd = discretize ( fa ; n\u03be = ngrid ); 1 JuEQ.BEMGrid_1D{Array{Float64,1},Array{Array{Float64,1},1},Float64,Int64}([-0.05, -0.15, -0.25, -0.35, -0.45, -0.55, -0.65, -0.75, -0.85, -0.95 \u2026 -39.05, -39.15, -39.25, -39.35, -39.45, -39.55, -39.65, -39.75, -39.85, -39.95], 0.1, 400, Array{Float64,1}[[-0.1, 0.0], [-0.2, -0.1], [-0.3, -0.2], [-0.4, -0.3], [-0.5, -0.4], [-0.6, -0.5], [-0.7, -0.6], [-0.8, -0.7], [-0.9, -0.8], [-1.0, -0.9] \u2026 [-39.1, -39.0], [-39.2, -39.1], [-39.3, -39.2], [-39.4, -39.3], [-39.5, -39.4], [-39.6, -39.5], [-39.7, -39.6], [-39.8, -39.7], [-39.9, -39.8], [-40.0, -39.9]], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 \u2026 -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-0.05, -0.15, -0.25, -0.35, -0.45, -0.55, -0.65, -0.75, -0.85, -0.95 \u2026 -39.05, -39.15, -39.25, -39.35, -39.45, -39.55, -39.65, -39.75, -39.85, -39.95], [-500.0, 500.0]) Next, we construct the required frictional parameter profile: 1 2 3 4 z = - gd . \u03be az = fill ( a0 , size ( z )) az [ z .\u2265 ( H + h )] .= amax az [ H .< z .< H + h ] = a0 .+ ( amax - a0 ) / ( h / \u0394z ) * collect ( 1 : Int ( h / \u0394z )); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 30-element Array{Float64,1}: 0.0105 0.011 0.0115 0.012 0.0125 0.013000000000000001 0.0135 0.014 0.0145 0.015 \u22ee 0.020999999999999998 0.0215 0.022 0.0225 0.023 0.0235 0.024 0.0245 0.025 Then, we provide the required initial condition satisfying uniform slip distribution over the depth: 1 2 3 4 5 \u03c40 = \u03c3 * amax * asinh ( vinit / 2 v0 * exp (( f0 + b0 * log ( v0 / vinit )) / amax )) + \u03b7 * vinit \u03c4z = fill ( \u03c40 , size ( z )) \u03b8z = @ . L / v0 * exp ( az / b0 * log ( 2 v0 / vinit * sinh (( \u03c4z - \u03b7 * vinit ) / az / \u03c3 )) - f0 / b0 ) vz = fill ( vinit , size ( z )) u0 = hcat ( vz , \u03b8z ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 400\u00d72 Array{Float64,2}: 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 \u22ee 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 Let's simulate only the first 200 years: 1 tspan = ( 0. , 200. ); 1 (0.0, 200.0) Finally, we provide the material properties w.r.t. our 'fault', 'grid' as well as other necessary parameters predefined using the same grid size & dimension: 1 mp = properties (; fault = fa , grid = gd , parameters = [ : a => az , : b => b0 , : L => L , : \u03c3 => \u03c3 , : \u03b7 => \u03b7 , : k => [ : \u03bb => \u03bb , : \u03bc => \u03bc ], : vpl => vpl , : f0 => f0 , : v0 => v0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 13 [ Info: Calculating stiffness tensor ... [ Info: Fault material properties establised. JuEQ.PlaneMaterialProperties{1,Float64,Array{Float64,1},Array{Float64,2}} dims: Tuple{Int64} a: Array{Float64}((400,)) [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01 \u2026 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025] b: Array{Float64}((400,)) [0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015 \u2026 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015] L: Array{Float64}((400,)) [8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0 \u2026 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0] k: Array{Float64}((400, 400)) [1.35974 -0.815844 \u2026 -6.39586e-6 -6.36374e-6; -0.815844 1.98134 \u2026 -6.39609e-6 -6.36397e-6; \u2026 ; -6.39586e-6 -6.39609e-6 \u2026 2.03961 -0.679871; -6.36374e-6 -6.36397e-6 \u2026 -0.679871 2.03961] \u03c3: Array{Float64}((400,)) [500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0 \u2026 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0] \u03b7: Array{Float64}((400,)) [1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9 \u2026 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9] vpl: Float64 31.536 f0: Float64 0.6 v0: Float64 31536.0 Tip Check properties for extended options. Check our profile now: 1 plot ([ mp . a , mp . b ], z , label = [ \"a\" , \"b\" ], yflip = true , ylabel = \"Depth (km)\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 0.012 \\n \\n \\n 0.015 \\n \\n \\n 0.018 \\n \\n \\n 0.021 \\n \\n \\n 0.024 \\n \\n \\n 0 \\n \\n \\n 10 \\n \\n \\n 20 \\n \\n \\n 30 \\n \\n \\n 40 \\n \\n \\n Depth (km) \\n \\n \\n \\n \\n \\n \\n \\n a \\n \\n \\n \\n b \\n \\n \\n\") We then contruct the ODEProblem as following by stating which state evolution law to use and frcitonal law form, plus initial condition and simulation time: 1 prob = EarthquakeCycleProblem ( gd , mp , u0 , tspan ; se = DieterichStateLaw (), fform = RForm ()); 1 2 3 ODEProblem with uType Array{Float64,2} and tType Float64. In-place: true timespan: (0.0, 200.0) u0: [31.536 0.000253678; 31.536 0.000253678; \u2026 ; 31.536 0.253678; 31.536 0.253678] Solve Model \u00b6 We then solve the ODEs: 1 sol = solve ( prob , Tsit5 (), reltol = 1e-6 , abstol = 1e-6 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 retcode: Success Interpolation: specialized 4th order \"free\" interpolation t: 4814-element Array{Float64,1}: 0.0 6.483553518719132e-5 9.44532839048002e-5 0.00014950199694886354 0.0001969017343314171 0.0002589370267499311 0.00032362086183610665 0.0004000242025107322 0.0004844340682573306 0.0005812591543481377 \u22ee 198.66317580661035 198.81599601090952 198.9735692145639 199.13681420817997 199.30704525039675 199.48496682770454 199.66952071102318 199.8589025257933 200.0 u: 4814-element Array{Array{Float64,2},1}: [31.536 0.000253678; 31.536 0.000253678; \u2026 ; 31.536 0.253678; 31.536 0.253678] [22.4215 0.000318453; 22.4215 0.000318453; \u2026 ; 31.536 0.253678; 31.536 0.253678] [19.6236 0.000348045; 19.6236 0.000348045; \u2026 ; 31.536 0.253678; 31.536 0.253678] [15.747 0.000403048; 15.747 0.000403048; \u2026 ; 31.536 0.253678; 31.536 0.253678] [13.3297 0.000450411; 13.3297 0.000450411; \u2026 ; 31.536 0.253678; 31.536 0.253678] [10.9855 0.000512401; 10.9855 0.000512401; \u2026 ; 31.536 0.253678; 31.536 0.253678] [9.1923 0.000577041; 9.1923 0.000577041; \u2026 ; 31.536 0.253678; 31.536 0.253678] [7.62907 0.000653395; 7.62907 0.000653395; \u2026 ; 31.536 0.253678; 31.536 0.253678] [6.35871 0.000737754; 6.35871 0.000737754; \u2026 ; 31.536 0.253678; 31.536 0.253678] [5.28542 0.000834524; 5.28542 0.000834524; \u2026 ; 31.536 0.253678; 31.536 0.253678] \u22ee [0.000251795 3.02087; 0.00025182 3.02087; \u2026 ; 39.5126 0.201016; 36.8001 0.216185] [0.000236784 3.17367; 0.000236808 3.17367; \u2026 ; 39.2862 0.202129; 36.6489 0.217045] [0.00022298 3.33123; 0.000223003 3.33123; \u2026 ; 39.0508 0.203309; 36.4921 0.217951] [0.000210202 3.49446; 0.000210224 3.49446; \u2026 ; 38.8067 0.204558; 36.3297 0.218908] [0.000198281 3.66468; 0.000198302 3.66468; \u2026 ; 38.5537 0.205881; 36.1616 0.219915] [0.000187127 3.84258; 0.000187147 3.84258; \u2026 ; 38.2928 0.207276; 35.9886 0.220973] [0.000176761 4.02712; 0.000176781 4.02712; \u2026 ; 38.0279 0.208724; 35.813 0.222065] [0.000167214 4.21648; 0.000167232 4.21648; \u2026 ; 37.7635 0.210201; 35.638 0.223175] [0.000160724 4.35757; 0.000160741 4.35757; \u2026 ; 37.5721 0.21129; 35.5113 0.223989] Tip For details of solving options, see here . Tip Raise the accuracy option if you get instability when solving these ODEs. Results \u00b6 The first event happens at around 196 year: 1 2 maxv = max_velocity ( sol ) plot ( sol . t , log10 . ( maxv / ms2mmyr ), xlabel = \"Time (year)\" , ylabel = \"Max Velocity (log10 (m/s))\" , xlims = ( 190 , 200 ), label = \"\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 190.0 \\n \\n \\n 192.5 \\n \\n \\n 195.0 \\n \\n \\n 197.5 \\n \\n \\n 200.0 \\n \\n \\n -8 \\n \\n \\n -6 \\n \\n \\n -4 \\n \\n \\n -2 \\n \\n \\n 0 \\n \\n \\n Time (year) \\n \\n \\n Max Velocity (log10 (m/s)) \\n \\n \\n \\n\") Note Click here for the slip evolution over 3000 years simulation. It may need some time to load the page. This page was generated using Literate.jl .","title":"Example 1D"},{"location":"examples/generated/bp1/#define-parameters","text":"First, we load the package 1 2 using JuEQ using Plots Instead of using SI unit, we refactor ours into the follow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ms2mmyr = 365 * 86400 * 1e3 # convert velocity from m/s to mm/yr \u03c1 = 2670.0 # density [kg/m\u00b3] vs = 3464.0 # shear wave velocity [m/s] \u03c3 = 500.0 # effective normal stress [bar] a0 = 0.010 # frictional paramter `a` in vw zone amax = 0.025 # frictional paramter `a` in vs zone b0 = 0.015 # frictional paramter `b` L = 8.0 # critical distance [mm] vpl = 1e-9 * ms2mmyr # plate rate [mm/yr] vinit = 1e-9 * ms2mmyr # initial velocity [mm/yr] v0 = 1e-6 * ms2mmyr # reference velocity [mm/yr] f0 = 0.6 # reference frictional coefficient H = 15.0 # vw zone [km] h = 3.0 # vw-vs changing zone [km] Wf = 40.0 # fault depth [km] \u0394z = 100.0e-3 # grid size interval [km] tf = 400.0 ; # simulation time [yr] 1 400.0 Warning Make sure your units are consistent across the whole variable space. Pontenial imporvement may incoporate Unitful.jl package. Then we arrive at some parameters that are implicit by above: 1 2 3 4 \u03bc = vs ^ 2 * \u03c1 / 1e5 / 1e6 # shear modulus [bar\u00b7km/mm] \u03bb = \u03bc # poisson material \u03b7 = \u03bc / 2 ( vs * 1e-3 * 365 * 86400 ) ngrid = round ( Int , Wf / \u0394z ); # number of grids 1 400 Now, we start to construct our model using parameters above. First, we create a 'fault' by specifying fault type and depth: Tip Here, we do not need to provide dip for strike-slip fault as it automatically choose 90 . See fault .","title":"Define Parameters"},{"location":"examples/generated/bp1/#construct-model","text":"1 fa = fault ( StrikeSlipFault , Wf ); 1 PlaneFaultDomain{StrikeSlipFault,1,Float64}(90.0, (40.0,)) Next, we generate the grid regarding the fault we just created by giving number of grids: Note This package use \u03be for denoting downdip coordinate and x for along-strike one. See discretize . 1 gd = discretize ( fa ; n\u03be = ngrid ); 1 JuEQ.BEMGrid_1D{Array{Float64,1},Array{Array{Float64,1},1},Float64,Int64}([-0.05, -0.15, -0.25, -0.35, -0.45, -0.55, -0.65, -0.75, -0.85, -0.95 \u2026 -39.05, -39.15, -39.25, -39.35, -39.45, -39.55, -39.65, -39.75, -39.85, -39.95], 0.1, 400, Array{Float64,1}[[-0.1, 0.0], [-0.2, -0.1], [-0.3, -0.2], [-0.4, -0.3], [-0.5, -0.4], [-0.6, -0.5], [-0.7, -0.6], [-0.8, -0.7], [-0.9, -0.8], [-1.0, -0.9] \u2026 [-39.1, -39.0], [-39.2, -39.1], [-39.3, -39.2], [-39.4, -39.3], [-39.5, -39.4], [-39.6, -39.5], [-39.7, -39.6], [-39.8, -39.7], [-39.9, -39.8], [-40.0, -39.9]], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 \u2026 -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-0.05, -0.15, -0.25, -0.35, -0.45, -0.55, -0.65, -0.75, -0.85, -0.95 \u2026 -39.05, -39.15, -39.25, -39.35, -39.45, -39.55, -39.65, -39.75, -39.85, -39.95], [-500.0, 500.0]) Next, we construct the required frictional parameter profile: 1 2 3 4 z = - gd . \u03be az = fill ( a0 , size ( z )) az [ z .\u2265 ( H + h )] .= amax az [ H .< z .< H + h ] = a0 .+ ( amax - a0 ) / ( h / \u0394z ) * collect ( 1 : Int ( h / \u0394z )); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 30-element Array{Float64,1}: 0.0105 0.011 0.0115 0.012 0.0125 0.013000000000000001 0.0135 0.014 0.0145 0.015 \u22ee 0.020999999999999998 0.0215 0.022 0.0225 0.023 0.0235 0.024 0.0245 0.025 Then, we provide the required initial condition satisfying uniform slip distribution over the depth: 1 2 3 4 5 \u03c40 = \u03c3 * amax * asinh ( vinit / 2 v0 * exp (( f0 + b0 * log ( v0 / vinit )) / amax )) + \u03b7 * vinit \u03c4z = fill ( \u03c40 , size ( z )) \u03b8z = @ . L / v0 * exp ( az / b0 * log ( 2 v0 / vinit * sinh (( \u03c4z - \u03b7 * vinit ) / az / \u03c3 )) - f0 / b0 ) vz = fill ( vinit , size ( z )) u0 = hcat ( vz , \u03b8z ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 400\u00d72 Array{Float64,2}: 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 31.536 0.000253678 \u22ee 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 31.536 0.253678 Let's simulate only the first 200 years: 1 tspan = ( 0. , 200. ); 1 (0.0, 200.0) Finally, we provide the material properties w.r.t. our 'fault', 'grid' as well as other necessary parameters predefined using the same grid size & dimension: 1 mp = properties (; fault = fa , grid = gd , parameters = [ : a => az , : b => b0 , : L => L , : \u03c3 => \u03c3 , : \u03b7 => \u03b7 , : k => [ : \u03bb => \u03bb , : \u03bc => \u03bc ], : vpl => vpl , : f0 => f0 , : v0 => v0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 13 [ Info: Calculating stiffness tensor ... [ Info: Fault material properties establised. JuEQ.PlaneMaterialProperties{1,Float64,Array{Float64,1},Array{Float64,2}} dims: Tuple{Int64} a: Array{Float64}((400,)) [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01 \u2026 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025] b: Array{Float64}((400,)) [0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015 \u2026 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015] L: Array{Float64}((400,)) [8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0 \u2026 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0] k: Array{Float64}((400, 400)) [1.35974 -0.815844 \u2026 -6.39586e-6 -6.36374e-6; -0.815844 1.98134 \u2026 -6.39609e-6 -6.36397e-6; \u2026 ; -6.39586e-6 -6.39609e-6 \u2026 2.03961 -0.679871; -6.36374e-6 -6.36397e-6 \u2026 -0.679871 2.03961] \u03c3: Array{Float64}((400,)) [500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0 \u2026 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0, 500.0] \u03b7: Array{Float64}((400,)) [1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9 \u2026 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9, 1.4664e-9] vpl: Float64 31.536 f0: Float64 0.6 v0: Float64 31536.0 Tip Check properties for extended options. Check our profile now: 1 plot ([ mp . a , mp . b ], z , label = [ \"a\" , \"b\" ], yflip = true , ylabel = \"Depth (km)\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 0.012 \\n \\n \\n 0.015 \\n \\n \\n 0.018 \\n \\n \\n 0.021 \\n \\n \\n 0.024 \\n \\n \\n 0 \\n \\n \\n 10 \\n \\n \\n 20 \\n \\n \\n 30 \\n \\n \\n 40 \\n \\n \\n Depth (km) \\n \\n \\n \\n \\n \\n \\n \\n a \\n \\n \\n \\n b \\n \\n \\n\") We then contruct the ODEProblem as following by stating which state evolution law to use and frcitonal law form, plus initial condition and simulation time: 1 prob = EarthquakeCycleProblem ( gd , mp , u0 , tspan ; se = DieterichStateLaw (), fform = RForm ()); 1 2 3 ODEProblem with uType Array{Float64,2} and tType Float64. In-place: true timespan: (0.0, 200.0) u0: [31.536 0.000253678; 31.536 0.000253678; \u2026 ; 31.536 0.253678; 31.536 0.253678]","title":"Construct Model"},{"location":"examples/generated/bp1/#solve-model","text":"We then solve the ODEs: 1 sol = solve ( prob , Tsit5 (), reltol = 1e-6 , abstol = 1e-6 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 retcode: Success Interpolation: specialized 4th order \"free\" interpolation t: 4814-element Array{Float64,1}: 0.0 6.483553518719132e-5 9.44532839048002e-5 0.00014950199694886354 0.0001969017343314171 0.0002589370267499311 0.00032362086183610665 0.0004000242025107322 0.0004844340682573306 0.0005812591543481377 \u22ee 198.66317580661035 198.81599601090952 198.9735692145639 199.13681420817997 199.30704525039675 199.48496682770454 199.66952071102318 199.8589025257933 200.0 u: 4814-element Array{Array{Float64,2},1}: [31.536 0.000253678; 31.536 0.000253678; \u2026 ; 31.536 0.253678; 31.536 0.253678] [22.4215 0.000318453; 22.4215 0.000318453; \u2026 ; 31.536 0.253678; 31.536 0.253678] [19.6236 0.000348045; 19.6236 0.000348045; \u2026 ; 31.536 0.253678; 31.536 0.253678] [15.747 0.000403048; 15.747 0.000403048; \u2026 ; 31.536 0.253678; 31.536 0.253678] [13.3297 0.000450411; 13.3297 0.000450411; \u2026 ; 31.536 0.253678; 31.536 0.253678] [10.9855 0.000512401; 10.9855 0.000512401; \u2026 ; 31.536 0.253678; 31.536 0.253678] [9.1923 0.000577041; 9.1923 0.000577041; \u2026 ; 31.536 0.253678; 31.536 0.253678] [7.62907 0.000653395; 7.62907 0.000653395; \u2026 ; 31.536 0.253678; 31.536 0.253678] [6.35871 0.000737754; 6.35871 0.000737754; \u2026 ; 31.536 0.253678; 31.536 0.253678] [5.28542 0.000834524; 5.28542 0.000834524; \u2026 ; 31.536 0.253678; 31.536 0.253678] \u22ee [0.000251795 3.02087; 0.00025182 3.02087; \u2026 ; 39.5126 0.201016; 36.8001 0.216185] [0.000236784 3.17367; 0.000236808 3.17367; \u2026 ; 39.2862 0.202129; 36.6489 0.217045] [0.00022298 3.33123; 0.000223003 3.33123; \u2026 ; 39.0508 0.203309; 36.4921 0.217951] [0.000210202 3.49446; 0.000210224 3.49446; \u2026 ; 38.8067 0.204558; 36.3297 0.218908] [0.000198281 3.66468; 0.000198302 3.66468; \u2026 ; 38.5537 0.205881; 36.1616 0.219915] [0.000187127 3.84258; 0.000187147 3.84258; \u2026 ; 38.2928 0.207276; 35.9886 0.220973] [0.000176761 4.02712; 0.000176781 4.02712; \u2026 ; 38.0279 0.208724; 35.813 0.222065] [0.000167214 4.21648; 0.000167232 4.21648; \u2026 ; 37.7635 0.210201; 35.638 0.223175] [0.000160724 4.35757; 0.000160741 4.35757; \u2026 ; 37.5721 0.21129; 35.5113 0.223989] Tip For details of solving options, see here . Tip Raise the accuracy option if you get instability when solving these ODEs.","title":"Solve Model"},{"location":"examples/generated/bp1/#results","text":"The first event happens at around 196 year: 1 2 maxv = max_velocity ( sol ) plot ( sol . t , log10 . ( maxv / ms2mmyr ), xlabel = \"Time (year)\" , ylabel = \"Max Velocity (log10 (m/s))\" , xlims = ( 190 , 200 ), label = \"\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 190.0 \\n \\n \\n 192.5 \\n \\n \\n 195.0 \\n \\n \\n 197.5 \\n \\n \\n 200.0 \\n \\n \\n -8 \\n \\n \\n -6 \\n \\n \\n -4 \\n \\n \\n -2 \\n \\n \\n 0 \\n \\n \\n Time (year) \\n \\n \\n Max Velocity (log10 (m/s)) \\n \\n \\n \\n\") Note Click here for the slip evolution over 3000 years simulation. It may need some time to load the page. This page was generated using Literate.jl .","title":"Results"},{"location":"examples/generated/otfsync/","text":"Note This example is adapted from Wei, 2016 AGU Tip It will automatically use parallel scheme if nprocs() \u2242\u0338 1 when building stiffness tensor. To do so: 1 2 3 using Distributed addprocs ( 4 ); # add # of cores you desire using JuEQ Define Parameters \u00b6 First, we load the package and define some basic parameters: 1 2 3 4 5 6 7 8 9 using JuEQ using Plots ms2mmyr = 365 * 86400 * 1e3 \u03c1 = 2670.0 # kg/m\u00b3 cs = 3044.0 # m/s vpl = 100.0 # mm/yr v0 = 3.2e4 # mm/yr f0 = 0.6 ; 1 0.6 Then we come to parameters implicit by above: 1 2 3 4 \u03bc = 0.3 # Bar\u00b7km/mm \u03bb = \u03bc # poisson material \u03b1 = ( \u03bb + \u03bc ) / ( \u03bb + 2 \u03bc ) \u03b7 = \u03bc / 2 ( cs * 1e-3 * 365 * 86400 ); # Bar\u00b7yr/mm 1 1.562571878306402e-9 Create a fault: 1 fa = fault ( StrikeSlipFault , ( 80. , 10. )); 1 PlaneFaultDomain{StrikeSlipFault,2,Float64}(90.0, (80.0, 10.0)) Generate grids: 1 gd = discretize ( fa ; nx = 160 , n\u03be = 20 , buffer_ratio = 1 ); 1 JuEQ.BEMGrid_2D{Array{Float64,1},Array{Array{Float64,1},1},Float64,Int64}([-39.75, -39.25, -38.75, -38.25, -37.75, -37.25, -36.75, -36.25, -35.75, -35.25 \u2026 35.25, 35.75, 36.25, 36.75, 37.25, 37.75, 38.25, 38.75, 39.25, 39.75], [-0.25, -0.75, -1.25, -1.75, -2.25, -2.75, -3.25, -3.75, -4.25, -4.75, -5.25, -5.75, -6.25, -6.75, -7.25, -7.75, -8.25, -8.75, -9.25, -9.75], 0.5, 0.5, 160, 20, Array{Float64,1}[[-40.0, -39.5], [-39.5, -39.0], [-39.0, -38.5], [-38.5, -38.0], [-38.0, -37.5], [-37.5, -37.0], [-37.0, -36.5], [-36.5, -36.0], [-36.0, -35.5], [-35.5, -35.0] \u2026 [35.0, 35.5], [35.5, 36.0], [36.0, 36.5], [36.5, 37.0], [37.0, 37.5], [37.5, 38.0], [38.0, 38.5], [38.5, 39.0], [39.0, 39.5], [39.5, 40.0]], Array{Float64,1}[[-0.5, 0.0], [-1.0, -0.5], [-1.5, -1.0], [-2.0, -1.5], [-2.5, -2.0], [-3.0, -2.5], [-3.5, -3.0], [-4.0, -3.5], [-4.5, -4.0], [-5.0, -4.5], [-5.5, -5.0], [-6.0, -5.5], [-6.5, -6.0], [-7.0, -6.5], [-7.5, -7.0], [-8.0, -7.5], [-8.5, -8.0], [-9.0, -8.5], [-9.5, -9.0], [-10.0, -9.5]], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-0.25, -0.75, -1.25, -1.75, -2.25, -2.75, -3.25, -3.75, -4.25, -4.75, -5.25, -5.75, -6.25, -6.75, -7.25, -7.75, -8.25, -8.75, -9.25, -9.75], 1) Tip It is recommended (from Yajing Liu's personal communication) to add buffer zones adjacent the horizontal edges to immitate zero dislocation at the ridge region. Basically, it affects how the stiffness tensor are periodically summed. To what extent it alters the results remains further testing. Under the hood, it shall impose buffer areas on both sides of along-strike, each of which has a length of bufferratio/2*fa[:x] . Thus, the stiffness contributions falling into those buffer zone shall be neglected, which is equivalent to impose zero-slip correspondingly. Time for us to establish frictional parameters profile: 1 2 3 4 5 6 7 8 9 10 11 a = 0.015 .* ones ( gd . nx , gd . n\u03be ) b = 0.0115 .* ones ( gd . nx , gd . n\u03be ) left_patch = @ . - 25. \u2264 gd . x \u2264 - 5. right_patch = @ . 5. \u2264 gd . x \u2264 25. vert_patch = @ . - 6. \u2264 gd . z \u2264 - 1. b [ xor . ( left_patch , right_patch ), vert_patch ] .= 0.0185 amb = a - b \u03c3max = 500. \u03c3 = [ min ( \u03c3max , 15. + 180. * z ) for z in - gd . z ] \u03c3 = Matrix ( repeat ( \u03c3 , 1 , gd . nx ) ' ) L = 12. ; 1 12.0 Check our profile: 1 2 3 4 5 6 7 8 9 10 11 12 13 p1 = heatmap ( amb ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \"a-b\" ); p2 = heatmap ( \u03c3 ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \" \\\\ sigma\" ); plot ( p1 , p2 , layout = ( 2 , 1 )) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n a-b \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 0.003 \\n \\n \\n - \\n \\n \\n 0.002 \\n \\n \\n - \\n \\n \\n 0.001 \\n \\n \\n 0 \\n \\n \\n 0.001 \\n \\n \\n 0.002 \\n \\n \\n 0.003 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n \u03c3 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 100 \\n \\n \\n 150 \\n \\n \\n 200 \\n \\n \\n 250 \\n \\n \\n 300 \\n \\n \\n 350 \\n \\n \\n 400 \\n \\n \\n 450 \\n \\n \\n 500 \\n \\n \\n \\n \\n \\n \\n\") Construct Model \u00b6 Construct our material property profile: 1 mp = properties ( fa , gd , [ : a => a , : b => b , : L => L , : \u03c3 => \u03c3 , : \u03b7 => \u03b7 , : k => [ : \u03bb => \u03bb , : \u03bc => \u03bc ], : vpl => vpl , : f0 => f0 , : v0 => v0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ Info: Calculating stiffness tensor ... [ Info: Fault material properties establised. JuEQ.PlaneMaterialProperties{2,Float64,Array{Float64,2},Array{Complex{Float64},3}} dims: Tuple{Int64,Int64} a: Array{Float64}((160, 20)) [0.015 0.015 \u2026 0.015 0.015; 0.015 0.015 \u2026 0.015 0.015; \u2026 ; 0.015 0.015 \u2026 0.015 0.015; 0.015 0.015 \u2026 0.015 0.015] b: Array{Float64}((160, 20)) [0.0115 0.0115 \u2026 0.0115 0.0115; 0.0115 0.0115 \u2026 0.0115 0.0115; \u2026 ; 0.0115 0.0115 \u2026 0.0115 0.0115; 0.0115 0.0115 \u2026 0.0115 0.0115] L: Array{Float64}((160, 20)) [12.0 12.0 \u2026 12.0 12.0; 12.0 12.0 \u2026 12.0 12.0; \u2026 ; 12.0 12.0 \u2026 12.0 12.0; 12.0 12.0 \u2026 12.0 12.0] k: Array{Complex{Float64}}((160, 20, 20)) Complex{Float64}[0.254648+0.0im -0.152789+0.0im \u2026 -0.00055943+0.0im -0.000503351+0.0im; 0.254915-9.92045e-18im -0.152567-7.18284e-19im \u2026 -0.000455488-2.85874e-21im -0.00040226-9.21148e-21im; \u2026 ; 0.78401-3.89143e-18im -0.0149563-6.43374e-18im \u2026 6.78809e-13-1.71483e-21im 2.84531e-14+1.35689e-23im; 0.784076+2.99306e-19im -0.0149479-1.53641e-18im \u2026 4.33558e-13-1.04805e-22im -1.86728e-13+5.91773e-22im] Complex{Float64}[-0.152789+0.0im 0.371059+0.0im \u2026 -0.000569356+0.0im -0.00051138+0.0im; -0.15257-2.79182e-18im 0.37131-9.40545e-18im \u2026 -0.000469-6.77626e-21im -0.000413734-5.39984e-21im; \u2026 ; -0.0173791+2.19565e-18im 0.826915+8.36764e-19im \u2026 -4.6572e-13-1.34349e-21im 6.73039e-13-7.19082e-22im; -0.0173699-1.04872e-18im 0.826977+2.85134e-18im \u2026 -4.86674e-13-4.91837e-23im 4.39738e-13-6.26032e-22im] Complex{Float64}[-0.0363781+0.0im -0.133387+0.0im \u2026 -0.000589806+0.0im -0.000527873+0.0im; -0.0361831-2.1684e-19im -0.133181-7.99599e-19im \u2026 -0.000492091-2.75286e-21im -0.00043281-3.59989e-21im; \u2026 ; 9.42205e-5-4.75247e-19im -0.0138966-1.67687e-18im \u2026 4.78959e-13+1.37684e-21im -4.54393e-13+4.76101e-22im; 9.44e-5-6.84032e-19im -0.0138888-2.03806e-18im \u2026 8.00646e-14-1.39889e-22im -4.8123e-13-6.10271e-23im] ... Complex{Float64}[-0.000625436+0.0im -0.000637855+0.0im \u2026 -0.127397+0.0im -0.0255343+0.0im; -0.000518554-1.27055e-20im -0.000534698-1.27055e-21im \u2026 -0.127238-1.28749e-19im -0.0253991-3.45589e-19im; \u2026 ; 9.26806e-14-1.29914e-21im 2.0563e-13+1.61014e-21im \u2026 -0.0138824+1.01786e-18im 0.000228985-5.75375e-19im; 4.21404e-14-7.87087e-23im -2.05234e-13+5.16603e-22im \u2026 -0.0138746-2.00471e-18im 0.000228943-1.22109e-20im] Complex{Float64}[-0.00055943+0.0im -0.000569356+0.0im \u2026 0.381902+0.0im -0.12739+0.0im; -0.00045553-4.5528e-21im -0.000469034-6.24687e-21im \u2026 0.382104+1.51788e-18im -0.127231-1.81604e-18im; \u2026 ; 1.53612e-13-4.10456e-22im 8.4465e-14+1.09244e-21im \u2026 0.827193+2.16326e-18im -0.0138824-2.40971e-18im; -9.174e-14+3.52978e-23im 6.35933e-14-1.94583e-22im \u2026 0.827255-3.09464e-18im -0.0138746-6.87684e-19im] Complex{Float64}[-0.000503351+0.0im -0.00051138+0.0im \u2026 -0.12739+0.0im 0.381909+0.0im; -0.000402298-1.27055e-21im -0.000413764-7.41154e-21im \u2026 -0.127231+7.72494e-19im 0.38211-1.14248e-17im; \u2026 ; 1.45108e-13-2.9691e-22im 1.478e-13-5.9501e-22im \u2026 -0.0138824+4.56513e-18im 0.827193+8.6732e-18im; -7.00794e-14+6.1893e-22im -8.55222e-14-9.09477e-24im \u2026 -0.0138746-4.34537e-19im 0.827255-2.18242e-18im] \u03c3: Array{Float64}((160, 20)) [60.0 150.0 \u2026 500.0 500.0; 60.0 150.0 \u2026 500.0 500.0; \u2026 ; 60.0 150.0 \u2026 500.0 500.0; 60.0 150.0 \u2026 500.0 500.0] \u03b7: Array{Float64}((160, 20)) [1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; \u2026 ; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9] vpl: Float64 100.0 f0: Float64 0.6 v0: Float64 32000.0 Provide the initial condition: 1 2 3 vinit = vpl .* ones ( gd . nx , gd . n\u03be ) \u03b80 = L ./ vinit ./ 1.1 u0 = cat ( vinit , \u03b80 , dims = 3 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 160\u00d720\u00d72 Array{Float64,3}: [:, :, 1] = 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u22ee \u22f1 \u22ee 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 [:, :, 2] = 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u22ee \u22f1 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 Get our ODEs problem: 1 prob = EarthquakeCycleProblem ( gd , mp , u0 , ( 0. , 18. ); se = DieterichStateLaw (), fform = CForm ()); 1 2 3 4 5 ODEProblem with uType Array{Float64,3} and tType Float64. In-place: true timespan: (0.0, 18.0) u0: [100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0; \u2026 ; 100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0] [0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091; \u2026 ; 0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091] Solve Model \u00b6 Solve the model: 1 sol = solve ( prob , Tsit5 (), reltol = 1e-6 , abstol = 1e-6 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 retcode: Success Interpolation: specialized 4th order \"free\" interpolation t: 3009-element Array{Float64,1}: 0.0 0.023024248421406265 0.0351255887693807 0.05876569503928833 0.07976766186029392 0.11039745942303938 0.1434255742236179 0.18505221605685096 0.23039961851701168 0.28149227315967174 \u22ee 17.620910529073324 17.66877212637217 17.71657790765609 17.764324436550062 17.81200818883823 17.859625294155794 17.90717089472236 17.954637490041815 18.0 u: 3009-element Array{Array{Float64,3},1}: [100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0; \u2026 ; 100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0] [0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091; \u2026 ; 0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091] [98.9146 98.7561 \u2026 98.6482 98.6672; 98.7364 98.6541 \u2026 98.614 98.6385; \u2026 ; 98.7364 98.6541 \u2026 98.614 98.6385; 98.9146 98.7561 \u2026 98.6482 98.6672] [0.111114 0.111126 \u2026 0.111134 0.111132; 0.111127 0.111133 \u2026 0.111136 0.111134; \u2026 ; 0.111127 0.111133 \u2026 0.111136 0.111134; 0.111114 0.111126 \u2026 0.111134 0.111132] [98.5394 98.2571 \u2026 98.0281 98.0706; 98.2146 98.0464 \u2026 97.9516 98.0067; \u2026 ; 98.2146 98.0464 \u2026 97.9516 98.0067; 98.5394 98.2571 \u2026 98.0281 98.0706] [0.112104 0.112139 \u2026 0.112163 0.112159; 0.112143 0.112162 \u2026 0.112171 0.112166; \u2026 ; 0.112143 0.112162 \u2026 0.112171 0.112166; 0.112104 0.112139 \u2026 0.112163 0.112159] [98.0049 97.5137 \u2026 96.9797 97.0899; 97.3976 97.0433 \u2026 96.7821 96.9264; \u2026 ; 97.3976 97.0433 \u2026 96.7821 96.9264; 98.0049 97.5137 \u2026 96.9797 97.0899] [0.11387 0.113979 \u2026 0.114077 0.114058; 0.113999 0.114068 \u2026 0.114111 0.114086; \u2026 ; 0.113999 0.114068 \u2026 0.114111 0.114086; 0.11387 0.113979 \u2026 0.114077 0.114058] [97.6637 97.0474 \u2026 96.2126 96.4019; 96.8364 96.3324 \u2026 95.874 96.1241; \u2026 ; 96.8364 96.3324 \u2026 95.874 96.1241; 97.6637 97.0474 \u2026 96.2126 96.4019] [0.115256 0.115451 \u2026 0.11566 0.115617; 0.115497 0.115636 \u2026 0.115739 0.115681; \u2026 ; 0.115497 0.115636 \u2026 0.115739 0.115681; 0.115256 0.115451 \u2026 0.11566 0.115617] [97.3008 96.5932 \u2026 95.3364 95.6632; 96.2099 95.5445 \u2026 94.7547 95.1918; \u2026 ; 96.2099 95.5445 \u2026 94.7547 95.1918; 97.3008 96.5932 \u2026 95.3364 95.6632] [0.116988 0.117317 \u2026 0.117761 0.117658; 0.117432 0.117697 \u2026 0.117945 0.117808; \u2026 ; 0.117432 0.117697 \u2026 0.117945 0.117808; 0.116988 0.117317 \u2026 0.117761 0.117658] [97.0249 96.3026 \u2026 94.6681 95.1597; 95.7147 94.9515 \u2026 93.7973 94.4637; \u2026 ; 95.7147 94.9515 \u2026 93.7973 94.4637; 97.0249 96.3026 \u2026 94.6681 95.1597] [0.118521 0.118979 \u2026 0.119739 0.119542; 0.119207 0.119618 \u2026 0.120092 0.119827; \u2026 ; 0.119207 0.119618 \u2026 0.120092 0.119827; 0.118521 0.118979 \u2026 0.119739 0.119542] [96.7876 96.1141 \u2026 94.1599 94.865; 95.275 94.4751 \u2026 92.9191 93.8905; \u2026 ; 95.275 94.4751 \u2026 92.9191 93.8905; 96.7876 96.1141 \u2026 94.1599 94.865] [0.120043 0.120617 \u2026 0.12181 0.121452; 0.121037 0.121613 \u2026 0.122447 0.121959; \u2026 ; 0.121037 0.121613 \u2026 0.122447 0.121959; 0.120043 0.120617 \u2026 0.12181 0.121452] [96.6216 96.0368 \u2026 93.9387 94.8624; 94.958 94.1876 \u2026 92.3239 93.6197; \u2026 ; 94.958 94.1876 \u2026 92.3239 93.6197; 96.6216 96.0368 \u2026 93.9387 94.8624] [0.121286 0.121926 \u2026 0.123552 0.122981; 0.122592 0.123301 \u2026 0.124566 0.123773; \u2026 ; 0.122592 0.123301 \u2026 0.124566 0.123773; 0.121286 0.121926 \u2026 0.123552 0.122981] [96.5105 96.0338 \u2026 93.9958 95.1269; 94.7385 94.0453 \u2026 92.0305 93.6516; \u2026 ; 94.7385 94.0453 \u2026 92.0305 93.6516; 96.5105 96.0338 \u2026 93.9958 95.1269] [0.122295 0.122944 \u2026 0.12493 0.124097; 0.123904 0.124696 \u2026 0.126408 0.125225; \u2026 ; 0.123904 0.124696 \u2026 0.126408 0.125225; 0.122295 0.122944 \u2026 0.12493 0.124097] \u22ee [96.8206 96.8583 \u2026 98.6429 99.0521; 95.1492 95.1577 \u2026 97.9583 98.6168; \u2026 ; 95.1492 95.1577 \u2026 97.9583 98.6168; 96.8206 96.8583 \u2026 98.6429 99.0521] [0.124076 0.124025 \u2026 0.121731 0.121202; 0.126331 0.126321 \u2026 0.122628 0.121765; \u2026 ; 0.126331 0.126321 \u2026 0.122628 0.121765; 0.124076 0.124025 \u2026 0.121731 0.121202] [96.8731 96.9101 \u2026 98.6743 99.0733; 95.2289 95.2372 \u2026 98.007 98.6486; \u2026 ; 95.2289 95.2372 \u2026 98.007 98.6486; 96.8731 96.9101 \u2026 98.6743 99.0733] [0.124021 0.123972 \u2026 0.121698 0.12118; 0.126246 0.126236 \u2026 0.122576 0.121731; \u2026 ; 0.126246 0.126236 \u2026 0.122576 0.121731; 0.124021 0.123972 \u2026 0.121698 0.12118] [96.9287 96.9648 \u2026 98.7066 99.0951; 95.3133 95.3211 \u2026 98.0566 98.6812; \u2026 ; 95.3133 95.3211 \u2026 98.0566 98.6812; 96.9287 96.9648 \u2026 98.7066 99.0951] [0.123962 0.123913 \u2026 0.121664 0.121157; 0.126153 0.126143 \u2026 0.122522 0.121696; \u2026 ; 0.126153 0.126143 \u2026 0.122522 0.121696; 0.123962 0.123913 \u2026 0.121664 0.121157] [96.9873 97.0224 \u2026 98.7393 99.1173; 95.4023 95.4095 \u2026 98.107 98.7143; \u2026 ; 95.4023 95.4095 \u2026 98.107 98.7143; 96.9873 97.0224 \u2026 98.7393 99.1173] [0.123899 0.123851 \u2026 0.121627 0.121132; 0.126053 0.126044 \u2026 0.122465 0.121659; \u2026 ; 0.126053 0.126044 \u2026 0.122465 0.121659; 0.123899 0.123851 \u2026 0.121627 0.121132] [97.0489 97.0828 \u2026 98.7724 99.1398; 95.4958 95.5021 \u2026 98.1578 98.7478; \u2026 ; 95.4958 95.5021 \u2026 98.1578 98.7478; 97.0489 97.0828 \u2026 98.7724 99.1398] [0.123831 0.123784 \u2026 0.121589 0.121107; 0.125947 0.125938 \u2026 0.122406 0.121621; \u2026 ; 0.125947 0.125938 \u2026 0.122406 0.121621; 0.123831 0.123784 \u2026 0.121589 0.121107] [97.1134 97.1459 \u2026 98.8058 99.1626; 95.5937 95.5988 \u2026 98.2088 98.7816; \u2026 ; 95.5937 95.5988 \u2026 98.2088 98.7816; 97.1134 97.1459 \u2026 98.8058 99.1626] [0.123759 0.123713 \u2026 0.12155 0.121081; 0.125835 0.125827 \u2026 0.122345 0.121581; \u2026 ; 0.125835 0.125827 \u2026 0.122345 0.121581; 0.123759 0.123713 \u2026 0.12155 0.121081] [97.1809 97.2118 \u2026 98.8392 99.1855; 95.6961 95.6998 \u2026 98.2598 98.8155; \u2026 ; 95.6961 95.6998 \u2026 98.2598 98.8155; 97.1809 97.2118 \u2026 98.8392 99.1855] [0.123683 0.123639 \u2026 0.121511 0.121054; 0.125716 0.125709 \u2026 0.122284 0.121541; \u2026 ; 0.125716 0.125709 \u2026 0.122284 0.121541; 0.123683 0.123639 \u2026 0.121511 0.121054] [97.2514 97.2805 \u2026 98.8728 99.2087; 95.803 95.805 \u2026 98.3106 98.8495; \u2026 ; 95.803 95.805 \u2026 98.3106 98.8495; 97.2514 97.2805 \u2026 98.8728 99.2087] [0.123604 0.123561 \u2026 0.121471 0.121027; 0.125592 0.125586 \u2026 0.122222 0.121501; \u2026 ; 0.125592 0.125586 \u2026 0.122222 0.121501; 0.123604 0.123561 \u2026 0.121471 0.121027] [97.3218 97.3491 \u2026 98.9049 99.231; 95.91 95.9099 \u2026 98.3592 98.8821; \u2026 ; 95.91 95.9099 \u2026 98.3592 98.8821; 97.3218 97.3491 \u2026 98.9049 99.231] [0.123524 0.123484 \u2026 0.121432 0.121001; 0.125468 0.125464 \u2026 0.122162 0.121462; \u2026 ; 0.125468 0.125464 \u2026 0.122162 0.121462; 0.123524 0.123484 \u2026 0.121432 0.121001] Sanity Check of Results \u00b6 Take a look at the max velocity: 1 2 maxv = max_velocity ( sol ) plot ( sol . t , log10 . ( maxv / ms2mmyr ), xlabel = \"Time (year)\" , ylabel = \"Max Velocity (log10 (m/s))\" , label = \"\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 0 \\n \\n \\n 5 \\n \\n \\n 10 \\n \\n \\n 15 \\n \\n \\n -8 \\n \\n \\n -7 \\n \\n \\n -6 \\n \\n \\n -5 \\n \\n \\n -4 \\n \\n \\n -3 \\n \\n \\n -2 \\n \\n \\n Time (year) \\n \\n \\n Max Velocity (log10 (m/s)) \\n \\n \\n \\n\") View some snapshots to see the rupture (quasi-dynamic) patterns: 1 2 3 4 5 6 7 8 9 ind = argmax ( maxv ) myplot = ( ind ) -> heatmap ( log10 . ( sol . u [ ind ][ : , : , 1 ] ./ ms2mmyr ) ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \"t = $ ( sol . t [ ind ]) \" ) snaps = [ myplot ( i ) for i in ind - 700 : 200 : ind + 500 ] plot ( snaps ... , layout = ( length ( snaps ), 1 ), size = ( 600 , 1800 )) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 10.719730684126537 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 10.831121338149241 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.50 \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 14.765124351512933 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 9.25 \\n \\n \\n - \\n \\n \\n 9.00 \\n \\n \\n - \\n \\n \\n 8.75 \\n \\n \\n - \\n \\n \\n 8.50 \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n - \\n \\n \\n 7.50 \\n \\n \\n - \\n \\n \\n 7.25 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.896146309474155 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.5 \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n - \\n \\n \\n 5.5 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.897556049396742 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.5 \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n - \\n \\n \\n 5.5 \\n \\n \\n - \\n \\n \\n 5.0 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.91352145379932 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n - \\n \\n \\n 7.50 \\n \\n \\n - \\n \\n \\n 7.25 \\n \\n \\n - \\n \\n \\n 7.00 \\n \\n \\n - \\n \\n \\n 6.75 \\n \\n \\n - \\n \\n \\n 6.50 \\n \\n \\n - \\n \\n \\n 6.25 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 17.04370745093445 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 9.75 \\n \\n \\n - \\n \\n \\n 9.50 \\n \\n \\n - \\n \\n \\n 9.25 \\n \\n \\n - \\n \\n \\n 9.00 \\n \\n \\n - \\n \\n \\n 8.75 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n\") This page was generated using Literate.jl .","title":"Example 2D"},{"location":"examples/generated/otfsync/#define-parameters","text":"First, we load the package and define some basic parameters: 1 2 3 4 5 6 7 8 9 using JuEQ using Plots ms2mmyr = 365 * 86400 * 1e3 \u03c1 = 2670.0 # kg/m\u00b3 cs = 3044.0 # m/s vpl = 100.0 # mm/yr v0 = 3.2e4 # mm/yr f0 = 0.6 ; 1 0.6 Then we come to parameters implicit by above: 1 2 3 4 \u03bc = 0.3 # Bar\u00b7km/mm \u03bb = \u03bc # poisson material \u03b1 = ( \u03bb + \u03bc ) / ( \u03bb + 2 \u03bc ) \u03b7 = \u03bc / 2 ( cs * 1e-3 * 365 * 86400 ); # Bar\u00b7yr/mm 1 1.562571878306402e-9 Create a fault: 1 fa = fault ( StrikeSlipFault , ( 80. , 10. )); 1 PlaneFaultDomain{StrikeSlipFault,2,Float64}(90.0, (80.0, 10.0)) Generate grids: 1 gd = discretize ( fa ; nx = 160 , n\u03be = 20 , buffer_ratio = 1 ); 1 JuEQ.BEMGrid_2D{Array{Float64,1},Array{Array{Float64,1},1},Float64,Int64}([-39.75, -39.25, -38.75, -38.25, -37.75, -37.25, -36.75, -36.25, -35.75, -35.25 \u2026 35.25, 35.75, 36.25, 36.75, 37.25, 37.75, 38.25, 38.75, 39.25, 39.75], [-0.25, -0.75, -1.25, -1.75, -2.25, -2.75, -3.25, -3.75, -4.25, -4.75, -5.25, -5.75, -6.25, -6.75, -7.25, -7.75, -8.25, -8.75, -9.25, -9.75], 0.5, 0.5, 160, 20, Array{Float64,1}[[-40.0, -39.5], [-39.5, -39.0], [-39.0, -38.5], [-38.5, -38.0], [-38.0, -37.5], [-37.5, -37.0], [-37.0, -36.5], [-36.5, -36.0], [-36.0, -35.5], [-35.5, -35.0] \u2026 [35.0, 35.5], [35.5, 36.0], [36.0, 36.5], [36.5, 37.0], [37.0, 37.5], [37.5, 38.0], [38.0, 38.5], [38.5, 39.0], [39.0, 39.5], [39.5, 40.0]], Array{Float64,1}[[-0.5, 0.0], [-1.0, -0.5], [-1.5, -1.0], [-2.0, -1.5], [-2.5, -2.0], [-3.0, -2.5], [-3.5, -3.0], [-4.0, -3.5], [-4.5, -4.0], [-5.0, -4.5], [-5.5, -5.0], [-6.0, -5.5], [-6.5, -6.0], [-7.0, -6.5], [-7.5, -7.0], [-8.0, -7.5], [-8.5, -8.0], [-9.0, -8.5], [-9.5, -9.0], [-10.0, -9.5]], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [-0.25, -0.75, -1.25, -1.75, -2.25, -2.75, -3.25, -3.75, -4.25, -4.75, -5.25, -5.75, -6.25, -6.75, -7.25, -7.75, -8.25, -8.75, -9.25, -9.75], 1) Tip It is recommended (from Yajing Liu's personal communication) to add buffer zones adjacent the horizontal edges to immitate zero dislocation at the ridge region. Basically, it affects how the stiffness tensor are periodically summed. To what extent it alters the results remains further testing. Under the hood, it shall impose buffer areas on both sides of along-strike, each of which has a length of bufferratio/2*fa[:x] . Thus, the stiffness contributions falling into those buffer zone shall be neglected, which is equivalent to impose zero-slip correspondingly. Time for us to establish frictional parameters profile: 1 2 3 4 5 6 7 8 9 10 11 a = 0.015 .* ones ( gd . nx , gd . n\u03be ) b = 0.0115 .* ones ( gd . nx , gd . n\u03be ) left_patch = @ . - 25. \u2264 gd . x \u2264 - 5. right_patch = @ . 5. \u2264 gd . x \u2264 25. vert_patch = @ . - 6. \u2264 gd . z \u2264 - 1. b [ xor . ( left_patch , right_patch ), vert_patch ] .= 0.0185 amb = a - b \u03c3max = 500. \u03c3 = [ min ( \u03c3max , 15. + 180. * z ) for z in - gd . z ] \u03c3 = Matrix ( repeat ( \u03c3 , 1 , gd . nx ) ' ) L = 12. ; 1 12.0 Check our profile: 1 2 3 4 5 6 7 8 9 10 11 12 13 p1 = heatmap ( amb ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \"a-b\" ); p2 = heatmap ( \u03c3 ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \" \\\\ sigma\" ); plot ( p1 , p2 , layout = ( 2 , 1 )) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n a-b \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 0.003 \\n \\n \\n - \\n \\n \\n 0.002 \\n \\n \\n - \\n \\n \\n 0.001 \\n \\n \\n 0 \\n \\n \\n 0.001 \\n \\n \\n 0.002 \\n \\n \\n 0.003 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n \u03c3 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 100 \\n \\n \\n 150 \\n \\n \\n 200 \\n \\n \\n 250 \\n \\n \\n 300 \\n \\n \\n 350 \\n \\n \\n 400 \\n \\n \\n 450 \\n \\n \\n 500 \\n \\n \\n \\n \\n \\n \\n\")","title":"Define Parameters"},{"location":"examples/generated/otfsync/#construct-model","text":"Construct our material property profile: 1 mp = properties ( fa , gd , [ : a => a , : b => b , : L => L , : \u03c3 => \u03c3 , : \u03b7 => \u03b7 , : k => [ : \u03bb => \u03bb , : \u03bc => \u03bc ], : vpl => vpl , : f0 => f0 , : v0 => v0 ]); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ Info: Calculating stiffness tensor ... [ Info: Fault material properties establised. JuEQ.PlaneMaterialProperties{2,Float64,Array{Float64,2},Array{Complex{Float64},3}} dims: Tuple{Int64,Int64} a: Array{Float64}((160, 20)) [0.015 0.015 \u2026 0.015 0.015; 0.015 0.015 \u2026 0.015 0.015; \u2026 ; 0.015 0.015 \u2026 0.015 0.015; 0.015 0.015 \u2026 0.015 0.015] b: Array{Float64}((160, 20)) [0.0115 0.0115 \u2026 0.0115 0.0115; 0.0115 0.0115 \u2026 0.0115 0.0115; \u2026 ; 0.0115 0.0115 \u2026 0.0115 0.0115; 0.0115 0.0115 \u2026 0.0115 0.0115] L: Array{Float64}((160, 20)) [12.0 12.0 \u2026 12.0 12.0; 12.0 12.0 \u2026 12.0 12.0; \u2026 ; 12.0 12.0 \u2026 12.0 12.0; 12.0 12.0 \u2026 12.0 12.0] k: Array{Complex{Float64}}((160, 20, 20)) Complex{Float64}[0.254648+0.0im -0.152789+0.0im \u2026 -0.00055943+0.0im -0.000503351+0.0im; 0.254915-9.92045e-18im -0.152567-7.18284e-19im \u2026 -0.000455488-2.85874e-21im -0.00040226-9.21148e-21im; \u2026 ; 0.78401-3.89143e-18im -0.0149563-6.43374e-18im \u2026 6.78809e-13-1.71483e-21im 2.84531e-14+1.35689e-23im; 0.784076+2.99306e-19im -0.0149479-1.53641e-18im \u2026 4.33558e-13-1.04805e-22im -1.86728e-13+5.91773e-22im] Complex{Float64}[-0.152789+0.0im 0.371059+0.0im \u2026 -0.000569356+0.0im -0.00051138+0.0im; -0.15257-2.79182e-18im 0.37131-9.40545e-18im \u2026 -0.000469-6.77626e-21im -0.000413734-5.39984e-21im; \u2026 ; -0.0173791+2.19565e-18im 0.826915+8.36764e-19im \u2026 -4.6572e-13-1.34349e-21im 6.73039e-13-7.19082e-22im; -0.0173699-1.04872e-18im 0.826977+2.85134e-18im \u2026 -4.86674e-13-4.91837e-23im 4.39738e-13-6.26032e-22im] Complex{Float64}[-0.0363781+0.0im -0.133387+0.0im \u2026 -0.000589806+0.0im -0.000527873+0.0im; -0.0361831-2.1684e-19im -0.133181-7.99599e-19im \u2026 -0.000492091-2.75286e-21im -0.00043281-3.59989e-21im; \u2026 ; 9.42205e-5-4.75247e-19im -0.0138966-1.67687e-18im \u2026 4.78959e-13+1.37684e-21im -4.54393e-13+4.76101e-22im; 9.44e-5-6.84032e-19im -0.0138888-2.03806e-18im \u2026 8.00646e-14-1.39889e-22im -4.8123e-13-6.10271e-23im] ... Complex{Float64}[-0.000625436+0.0im -0.000637855+0.0im \u2026 -0.127397+0.0im -0.0255343+0.0im; -0.000518554-1.27055e-20im -0.000534698-1.27055e-21im \u2026 -0.127238-1.28749e-19im -0.0253991-3.45589e-19im; \u2026 ; 9.26806e-14-1.29914e-21im 2.0563e-13+1.61014e-21im \u2026 -0.0138824+1.01786e-18im 0.000228985-5.75375e-19im; 4.21404e-14-7.87087e-23im -2.05234e-13+5.16603e-22im \u2026 -0.0138746-2.00471e-18im 0.000228943-1.22109e-20im] Complex{Float64}[-0.00055943+0.0im -0.000569356+0.0im \u2026 0.381902+0.0im -0.12739+0.0im; -0.00045553-4.5528e-21im -0.000469034-6.24687e-21im \u2026 0.382104+1.51788e-18im -0.127231-1.81604e-18im; \u2026 ; 1.53612e-13-4.10456e-22im 8.4465e-14+1.09244e-21im \u2026 0.827193+2.16326e-18im -0.0138824-2.40971e-18im; -9.174e-14+3.52978e-23im 6.35933e-14-1.94583e-22im \u2026 0.827255-3.09464e-18im -0.0138746-6.87684e-19im] Complex{Float64}[-0.000503351+0.0im -0.00051138+0.0im \u2026 -0.12739+0.0im 0.381909+0.0im; -0.000402298-1.27055e-21im -0.000413764-7.41154e-21im \u2026 -0.127231+7.72494e-19im 0.38211-1.14248e-17im; \u2026 ; 1.45108e-13-2.9691e-22im 1.478e-13-5.9501e-22im \u2026 -0.0138824+4.56513e-18im 0.827193+8.6732e-18im; -7.00794e-14+6.1893e-22im -8.55222e-14-9.09477e-24im \u2026 -0.0138746-4.34537e-19im 0.827255-2.18242e-18im] \u03c3: Array{Float64}((160, 20)) [60.0 150.0 \u2026 500.0 500.0; 60.0 150.0 \u2026 500.0 500.0; \u2026 ; 60.0 150.0 \u2026 500.0 500.0; 60.0 150.0 \u2026 500.0 500.0] \u03b7: Array{Float64}((160, 20)) [1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; \u2026 ; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9; 1.56257e-9 1.56257e-9 \u2026 1.56257e-9 1.56257e-9] vpl: Float64 100.0 f0: Float64 0.6 v0: Float64 32000.0 Provide the initial condition: 1 2 3 vinit = vpl .* ones ( gd . nx , gd . n\u03be ) \u03b80 = L ./ vinit ./ 1.1 u0 = cat ( vinit , \u03b80 , dims = 3 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 160\u00d720\u00d72 Array{Float64,3}: [:, :, 1] = 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u22ee \u22f1 \u22ee 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 \u2026 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0 [:, :, 2] = 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u22ee \u22f1 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 \u2026 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 0.109091 Get our ODEs problem: 1 prob = EarthquakeCycleProblem ( gd , mp , u0 , ( 0. , 18. ); se = DieterichStateLaw (), fform = CForm ()); 1 2 3 4 5 ODEProblem with uType Array{Float64,3} and tType Float64. In-place: true timespan: (0.0, 18.0) u0: [100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0; \u2026 ; 100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0] [0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091; \u2026 ; 0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091]","title":"Construct Model"},{"location":"examples/generated/otfsync/#solve-model","text":"Solve the model: 1 sol = solve ( prob , Tsit5 (), reltol = 1e-6 , abstol = 1e-6 ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 retcode: Success Interpolation: specialized 4th order \"free\" interpolation t: 3009-element Array{Float64,1}: 0.0 0.023024248421406265 0.0351255887693807 0.05876569503928833 0.07976766186029392 0.11039745942303938 0.1434255742236179 0.18505221605685096 0.23039961851701168 0.28149227315967174 \u22ee 17.620910529073324 17.66877212637217 17.71657790765609 17.764324436550062 17.81200818883823 17.859625294155794 17.90717089472236 17.954637490041815 18.0 u: 3009-element Array{Array{Float64,3},1}: [100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0; \u2026 ; 100.0 100.0 \u2026 100.0 100.0; 100.0 100.0 \u2026 100.0 100.0] [0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091; \u2026 ; 0.109091 0.109091 \u2026 0.109091 0.109091; 0.109091 0.109091 \u2026 0.109091 0.109091] [98.9146 98.7561 \u2026 98.6482 98.6672; 98.7364 98.6541 \u2026 98.614 98.6385; \u2026 ; 98.7364 98.6541 \u2026 98.614 98.6385; 98.9146 98.7561 \u2026 98.6482 98.6672] [0.111114 0.111126 \u2026 0.111134 0.111132; 0.111127 0.111133 \u2026 0.111136 0.111134; \u2026 ; 0.111127 0.111133 \u2026 0.111136 0.111134; 0.111114 0.111126 \u2026 0.111134 0.111132] [98.5394 98.2571 \u2026 98.0281 98.0706; 98.2146 98.0464 \u2026 97.9516 98.0067; \u2026 ; 98.2146 98.0464 \u2026 97.9516 98.0067; 98.5394 98.2571 \u2026 98.0281 98.0706] [0.112104 0.112139 \u2026 0.112163 0.112159; 0.112143 0.112162 \u2026 0.112171 0.112166; \u2026 ; 0.112143 0.112162 \u2026 0.112171 0.112166; 0.112104 0.112139 \u2026 0.112163 0.112159] [98.0049 97.5137 \u2026 96.9797 97.0899; 97.3976 97.0433 \u2026 96.7821 96.9264; \u2026 ; 97.3976 97.0433 \u2026 96.7821 96.9264; 98.0049 97.5137 \u2026 96.9797 97.0899] [0.11387 0.113979 \u2026 0.114077 0.114058; 0.113999 0.114068 \u2026 0.114111 0.114086; \u2026 ; 0.113999 0.114068 \u2026 0.114111 0.114086; 0.11387 0.113979 \u2026 0.114077 0.114058] [97.6637 97.0474 \u2026 96.2126 96.4019; 96.8364 96.3324 \u2026 95.874 96.1241; \u2026 ; 96.8364 96.3324 \u2026 95.874 96.1241; 97.6637 97.0474 \u2026 96.2126 96.4019] [0.115256 0.115451 \u2026 0.11566 0.115617; 0.115497 0.115636 \u2026 0.115739 0.115681; \u2026 ; 0.115497 0.115636 \u2026 0.115739 0.115681; 0.115256 0.115451 \u2026 0.11566 0.115617] [97.3008 96.5932 \u2026 95.3364 95.6632; 96.2099 95.5445 \u2026 94.7547 95.1918; \u2026 ; 96.2099 95.5445 \u2026 94.7547 95.1918; 97.3008 96.5932 \u2026 95.3364 95.6632] [0.116988 0.117317 \u2026 0.117761 0.117658; 0.117432 0.117697 \u2026 0.117945 0.117808; \u2026 ; 0.117432 0.117697 \u2026 0.117945 0.117808; 0.116988 0.117317 \u2026 0.117761 0.117658] [97.0249 96.3026 \u2026 94.6681 95.1597; 95.7147 94.9515 \u2026 93.7973 94.4637; \u2026 ; 95.7147 94.9515 \u2026 93.7973 94.4637; 97.0249 96.3026 \u2026 94.6681 95.1597] [0.118521 0.118979 \u2026 0.119739 0.119542; 0.119207 0.119618 \u2026 0.120092 0.119827; \u2026 ; 0.119207 0.119618 \u2026 0.120092 0.119827; 0.118521 0.118979 \u2026 0.119739 0.119542] [96.7876 96.1141 \u2026 94.1599 94.865; 95.275 94.4751 \u2026 92.9191 93.8905; \u2026 ; 95.275 94.4751 \u2026 92.9191 93.8905; 96.7876 96.1141 \u2026 94.1599 94.865] [0.120043 0.120617 \u2026 0.12181 0.121452; 0.121037 0.121613 \u2026 0.122447 0.121959; \u2026 ; 0.121037 0.121613 \u2026 0.122447 0.121959; 0.120043 0.120617 \u2026 0.12181 0.121452] [96.6216 96.0368 \u2026 93.9387 94.8624; 94.958 94.1876 \u2026 92.3239 93.6197; \u2026 ; 94.958 94.1876 \u2026 92.3239 93.6197; 96.6216 96.0368 \u2026 93.9387 94.8624] [0.121286 0.121926 \u2026 0.123552 0.122981; 0.122592 0.123301 \u2026 0.124566 0.123773; \u2026 ; 0.122592 0.123301 \u2026 0.124566 0.123773; 0.121286 0.121926 \u2026 0.123552 0.122981] [96.5105 96.0338 \u2026 93.9958 95.1269; 94.7385 94.0453 \u2026 92.0305 93.6516; \u2026 ; 94.7385 94.0453 \u2026 92.0305 93.6516; 96.5105 96.0338 \u2026 93.9958 95.1269] [0.122295 0.122944 \u2026 0.12493 0.124097; 0.123904 0.124696 \u2026 0.126408 0.125225; \u2026 ; 0.123904 0.124696 \u2026 0.126408 0.125225; 0.122295 0.122944 \u2026 0.12493 0.124097] \u22ee [96.8206 96.8583 \u2026 98.6429 99.0521; 95.1492 95.1577 \u2026 97.9583 98.6168; \u2026 ; 95.1492 95.1577 \u2026 97.9583 98.6168; 96.8206 96.8583 \u2026 98.6429 99.0521] [0.124076 0.124025 \u2026 0.121731 0.121202; 0.126331 0.126321 \u2026 0.122628 0.121765; \u2026 ; 0.126331 0.126321 \u2026 0.122628 0.121765; 0.124076 0.124025 \u2026 0.121731 0.121202] [96.8731 96.9101 \u2026 98.6743 99.0733; 95.2289 95.2372 \u2026 98.007 98.6486; \u2026 ; 95.2289 95.2372 \u2026 98.007 98.6486; 96.8731 96.9101 \u2026 98.6743 99.0733] [0.124021 0.123972 \u2026 0.121698 0.12118; 0.126246 0.126236 \u2026 0.122576 0.121731; \u2026 ; 0.126246 0.126236 \u2026 0.122576 0.121731; 0.124021 0.123972 \u2026 0.121698 0.12118] [96.9287 96.9648 \u2026 98.7066 99.0951; 95.3133 95.3211 \u2026 98.0566 98.6812; \u2026 ; 95.3133 95.3211 \u2026 98.0566 98.6812; 96.9287 96.9648 \u2026 98.7066 99.0951] [0.123962 0.123913 \u2026 0.121664 0.121157; 0.126153 0.126143 \u2026 0.122522 0.121696; \u2026 ; 0.126153 0.126143 \u2026 0.122522 0.121696; 0.123962 0.123913 \u2026 0.121664 0.121157] [96.9873 97.0224 \u2026 98.7393 99.1173; 95.4023 95.4095 \u2026 98.107 98.7143; \u2026 ; 95.4023 95.4095 \u2026 98.107 98.7143; 96.9873 97.0224 \u2026 98.7393 99.1173] [0.123899 0.123851 \u2026 0.121627 0.121132; 0.126053 0.126044 \u2026 0.122465 0.121659; \u2026 ; 0.126053 0.126044 \u2026 0.122465 0.121659; 0.123899 0.123851 \u2026 0.121627 0.121132] [97.0489 97.0828 \u2026 98.7724 99.1398; 95.4958 95.5021 \u2026 98.1578 98.7478; \u2026 ; 95.4958 95.5021 \u2026 98.1578 98.7478; 97.0489 97.0828 \u2026 98.7724 99.1398] [0.123831 0.123784 \u2026 0.121589 0.121107; 0.125947 0.125938 \u2026 0.122406 0.121621; \u2026 ; 0.125947 0.125938 \u2026 0.122406 0.121621; 0.123831 0.123784 \u2026 0.121589 0.121107] [97.1134 97.1459 \u2026 98.8058 99.1626; 95.5937 95.5988 \u2026 98.2088 98.7816; \u2026 ; 95.5937 95.5988 \u2026 98.2088 98.7816; 97.1134 97.1459 \u2026 98.8058 99.1626] [0.123759 0.123713 \u2026 0.12155 0.121081; 0.125835 0.125827 \u2026 0.122345 0.121581; \u2026 ; 0.125835 0.125827 \u2026 0.122345 0.121581; 0.123759 0.123713 \u2026 0.12155 0.121081] [97.1809 97.2118 \u2026 98.8392 99.1855; 95.6961 95.6998 \u2026 98.2598 98.8155; \u2026 ; 95.6961 95.6998 \u2026 98.2598 98.8155; 97.1809 97.2118 \u2026 98.8392 99.1855] [0.123683 0.123639 \u2026 0.121511 0.121054; 0.125716 0.125709 \u2026 0.122284 0.121541; \u2026 ; 0.125716 0.125709 \u2026 0.122284 0.121541; 0.123683 0.123639 \u2026 0.121511 0.121054] [97.2514 97.2805 \u2026 98.8728 99.2087; 95.803 95.805 \u2026 98.3106 98.8495; \u2026 ; 95.803 95.805 \u2026 98.3106 98.8495; 97.2514 97.2805 \u2026 98.8728 99.2087] [0.123604 0.123561 \u2026 0.121471 0.121027; 0.125592 0.125586 \u2026 0.122222 0.121501; \u2026 ; 0.125592 0.125586 \u2026 0.122222 0.121501; 0.123604 0.123561 \u2026 0.121471 0.121027] [97.3218 97.3491 \u2026 98.9049 99.231; 95.91 95.9099 \u2026 98.3592 98.8821; \u2026 ; 95.91 95.9099 \u2026 98.3592 98.8821; 97.3218 97.3491 \u2026 98.9049 99.231] [0.123524 0.123484 \u2026 0.121432 0.121001; 0.125468 0.125464 \u2026 0.122162 0.121462; \u2026 ; 0.125468 0.125464 \u2026 0.122162 0.121462; 0.123524 0.123484 \u2026 0.121432 0.121001]","title":"Solve Model"},{"location":"examples/generated/otfsync/#sanity-check-of-results","text":"Take a look at the max velocity: 1 2 maxv = max_velocity ( sol ) plot ( sol . t , log10 . ( maxv / ms2mmyr ), xlabel = \"Time (year)\" , ylabel = \"Max Velocity (log10 (m/s))\" , label = \"\" ) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n 0 \\n \\n \\n 5 \\n \\n \\n 10 \\n \\n \\n 15 \\n \\n \\n -8 \\n \\n \\n -7 \\n \\n \\n -6 \\n \\n \\n -5 \\n \\n \\n -4 \\n \\n \\n -3 \\n \\n \\n -2 \\n \\n \\n Time (year) \\n \\n \\n Max Velocity (log10 (m/s)) \\n \\n \\n \\n\") View some snapshots to see the rupture (quasi-dynamic) patterns: 1 2 3 4 5 6 7 8 9 ind = argmax ( maxv ) myplot = ( ind ) -> heatmap ( log10 . ( sol . u [ ind ][ : , : , 1 ] ./ ms2mmyr ) ' , xticks = ( 0 : 10 / gd . \u0394x : gd . nx , - fa . span [ 1 ] / 2 : 10 : fa . span [ 1 ] / 2 ), yticks = ( 0 : 5 / gd . \u0394\u03be : gd . n\u03be , 0 : - 5 : - fa . span [ 2 ]), yflip = true , color =: isolum , aspect_ratio = 2 , title = \"t = $ ( sol . t [ ind ]) \" ) snaps = [ myplot ( i ) for i in ind - 700 : 200 : ind + 500 ] plot ( snaps ... , layout = ( length ( snaps ), 1 ), size = ( 600 , 1800 )) Documenter.Documents.RawHTML(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 10.719730684126537 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 10.831121338149241 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.50 \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n -30.0 \\n \\n \\n -20.0 \\n \\n \\n -10.0 \\n \\n \\n 0.0 \\n \\n \\n 10.0 \\n \\n \\n 20.0 \\n \\n \\n 30.0 \\n \\n \\n 40.0 \\n \\n \\n 0.0 \\n \\n \\n -5.0 \\n \\n \\n -10.0 \\n \\n \\n t = 14.765124351512933 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 9.25 \\n \\n \\n - \\n \\n \\n 9.00 \\n \\n \\n - \\n \\n \\n 8.75 \\n \\n \\n - \\n \\n \\n 8.50 \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n - \\n \\n \\n 7.50 \\n \\n \\n - \\n \\n \\n 7.25 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.896146309474155 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.5 \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n - \\n \\n \\n 5.5 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.897556049396742 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.5 \\n \\n \\n - \\n \\n \\n 8.0 \\n \\n \\n - \\n \\n \\n 7.5 \\n \\n \\n - \\n \\n \\n 7.0 \\n \\n \\n - \\n \\n \\n 6.5 \\n \\n \\n - \\n \\n \\n 6.0 \\n \\n \\n - \\n \\n \\n 5.5 \\n \\n \\n - \\n \\n \\n 5.0 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 14.91352145379932 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 8.25 \\n \\n \\n - \\n \\n \\n 8.00 \\n \\n \\n - \\n \\n \\n 7.75 \\n \\n \\n - \\n \\n \\n 7.50 \\n \\n \\n - \\n \\n \\n 7.25 \\n \\n \\n - \\n \\n \\n 7.00 \\n \\n \\n - \\n \\n \\n 6.75 \\n \\n \\n - \\n \\n \\n 6.50 \\n \\n \\n - \\n \\n \\n 6.25 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n -40.0 \\n \\n \\n \\n \\n \\n \\n \\n -30.0 \\n \\n \\n \\n \\n \\n \\n \\n -20.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n 10.0 \\n \\n \\n \\n \\n \\n \\n \\n 20.0 \\n \\n \\n \\n \\n \\n \\n \\n 30.0 \\n \\n \\n \\n \\n \\n \\n \\n 40.0 \\n \\n \\n \\n \\n \\n \\n \\n 0.0 \\n \\n \\n \\n \\n \\n \\n \\n -5.0 \\n \\n \\n \\n \\n \\n \\n \\n -10.0 \\n \\n \\n \\n \\n \\n \\n \\n t = 17.04370745093445 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n - \\n \\n \\n 9.75 \\n \\n \\n - \\n \\n \\n 9.50 \\n \\n \\n - \\n \\n \\n 9.25 \\n \\n \\n - \\n \\n \\n 9.00 \\n \\n \\n - \\n \\n \\n 8.75 \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n\") This page was generated using Literate.jl .","title":"Sanity Check of Results"}]}